<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Infinite Skillpoints (F6)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AOBScan(AmmoAddress, 89 46 40 8B 46 1C )

[Enable]
AmmoAddress-1:
nop
[Disable]
AmmoAddress-1:
dec eax
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>117</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"No Recoil (F7) [Original by l0wb1t]"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AOBScan(RecoilAddress, D9 58 0C 8A 51 10 88 50 10 D9 41 14 ) //It's this long for a reason.

[ENABLE]
alloc(newmem,64)
alloc(exit,64)
label(return)
label(zero)

RecoilAddress-16: //Setup our hook.
jmp newmem //Jump to our codecave.
return: //Set the return address label.

exit:
fld dword ptr [ecx] //Original Code
jmp return //Return

newmem:
mov ecx,[ebp+08] //Original Code
push edx //Preserve EDX to the stack
mov edx, [ebp+4] //Move the return address in to EDX
cmp byte ptr [edx],0x8D //Make sure it's for recoil.
pop edx //Restore EDX from the stack
jne exit //Return if it's not recoil.
mov ecx,zero //Give ECX the address to the zero label.
jmp exit //Return

zero:
dd 0

[DISABLE]
dealloc(newmem)
dealloc(exit)

RecoilAddress-16:
mov ecx,[ebp+08]
fld dword ptr [ecx]

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>118</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>29</ID>
      <Description>"No Spread (F8)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AOBScan(spread, 8B 08 F3 0F 11 81 ?? ?? ?? ?? 8B 08)

[ENABLE]
alloc(newmem,64)
alloc(original,64)
label(return)

AOBScan(ReturnAddress, F3 0F 11 4C 24 ?? F3 0F 11 04 24 E8 ?? ?? ?? ?? 5F)

spread+2:
jmp newmem
nop
nop
nop
return:

original:
movss [ecx+1D4],xmm0
jmp return

newmem:
cmp [ebp+4],ReturnAddress+10
jne original
mov [ecx+1D4],0
jmp return

[DISABLE]
dealloc(newmem)
dealloc(original)

spread+2:
movss [ecx+000001D4],xmm0
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>119</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Infinite Armor (F9)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AOBScan(armoraddress, 75 7F 8B 46 04 )

[ENABLE]
alloc(newmem,32)
alloc(exit,32)
label(return)

AOBScan(armoreturn, 57 57 51 F3 0F 11 04 24 FF 50 10 8B 8E) /* .text:1089A5AF                 push    edi
                                                               .text:1089A5B0                 push    edi
                                                               .text:1089A5B1                 push    ecx
                                                               .text:1089A5B2                 movss   dword ptr [esp], xmm0
                                                               .text:1089A5B7                 call    dword ptr [eax+10h]*/

armoraddress-9:
jmp newmem
nop
nop
nop
nop
return:

exit:
cmp byte ptr [ebp+10],00 //Original code
jmp return //Return to the original call.

newmem:
movss [esi+10],xmm0 //Original code
cmp [ebp+4],armoreturn+B //Check if it's the armor return call. (Return address is always EBP+4)
jne exit //Call the original if it's not armor.
mov [esi+10],#1120403456 //Push 100 in to the armor address.
jmp exit //Call the original

[DISABLE]
dealloc(newmem)
dealloc(exit)

armoraddress-9:
cmp byte ptr [ebp+10],00
movss [esi+10],xmm0
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>120</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Infinite Ammo (F10)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AOBScan(AmmoAddress, 0F 4C C7 ?? ?? ?? 5F 5E)

[Enable]
AmmoAddress+3:
nop
nop
nop
[Disable]
AmmoAddress+3:
sub [esi+10],eax
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>121</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Infinite Syringes (F11)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AOBScan(Syringe1, 89 46 60 8B 46 64 8B 48)
AOBScan(Syringe2, 89 46 60 8B 46 44 56 51)

[Enable]
Syringe1-1:
nop
Syringe2-1:
nop
[Disable]
Syringe1-1:
dec eax
Syringe2-1:
dec eax
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>122</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Money Pointer"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"FC3.dll"+01E110D4</Address>
      <Offsets>
        <Offset>64</Offset>
        <Offset>6F0</Offset>
        <Offset>20</Offset>
        <Offset>50</Offset>
        <Offset>8</Offset>
      </Offsets>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <Value>6000</Value>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
