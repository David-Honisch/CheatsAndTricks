<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>92</ID>
      <Description>"[Weapon]"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(getwptr,RDR2.exe,8B 55 30 48 8B CE ?? ?? ?? ?? ?? 8B 55 30 48 8B CE 41 89 07)
alloc(newmem,1024,getwptr) //"RDR2.exe"+182518

label(code)
label(return)

registersymbol(getwptr)

//------------------------
label(baseWeapon)
registersymbol(baseWeapon)
//------------------------

newmem:
  pushfq
  test rsi,rsi
  je code
  mov [baseWeapon],rsi

code:
  popfq
  mov edx,[rbp+30]
  mov rcx,rsi
  jmp return

baseWeapon:
  dq 0

getwptr:
  jmp newmem
  nop
return:

[DISABLE]
getwptr:
  db 8B 55 30 48 8B CE

unregistersymbol(getwptr)
unregistersymbol(baseWeapon)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+182518

"RDR2.exe"+1824F9: 48 8B CE              -  mov rcx,rsi
"RDR2.exe"+1824FC: E8 07 9E FF FF        -  call RDR2.exe+17C308
"RDR2.exe"+182501: 8B 55 30              -  mov edx,[rbp+30]
"RDR2.exe"+182504: 48 8B CE              -  mov rcx,rsi
"RDR2.exe"+182507: 8B D8                 -  mov ebx,eax
"RDR2.exe"+182509: E8 56 62 FA 00        -  call RDR2.exe+1128764
"RDR2.exe"+18250E: 03 D8                 -  add ebx,eax
"RDR2.exe"+182510: 41 89 1F              -  mov [r15],ebx
"RDR2.exe"+182513: 83 C8 FF              -  or eax,-01
"RDR2.exe"+182516: EB 19                 -  jmp RDR2.exe+182531
// ---------- INJECTING HERE ----------
"RDR2.exe"+182518: 8B 55 30              -  mov edx,[rbp+30]
"RDR2.exe"+18251B: 48 8B CE              -  mov rcx,rsi
// ---------- DONE INJECTING  ----------
"RDR2.exe"+18251E: E8 E5 9D FF FF        -  call RDR2.exe+17C308
"RDR2.exe"+182523: 8B 55 30              -  mov edx,[rbp+30]
"RDR2.exe"+182526: 48 8B CE              -  mov rcx,rsi
"RDR2.exe"+182529: 41 89 07              -  mov [r15],eax
"RDR2.exe"+18252C: E8 33 62 FA 00        -  call RDR2.exe+1128764
"RDR2.exe"+182531: 41 89 06              -  mov [r14],eax
"RDR2.exe"+182534: 48 85 FF              -  test rdi,rdi
"RDR2.exe"+182537: 74 10                 -  je RDR2.exe+182549
"RDR2.exe"+182539: 8B 57 10              -  mov edx,[rdi+10]
"RDR2.exe"+18253C: 41 B0 01              -  mov r8l,01
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>68</ID>
          <Description>"No Reload"</Description>
          <LastState/>
          <Color>000080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(noreloadA,RDR2.exe,2B C5 44 8B C3 8B D0 48 8B CF ?? ?? ?? ?? ?? 8B 9F)
aobscanmodule(noreloadB,RDR2.exe,2B C5 44 8B C3 8B D0 48 8B CF ?? ?? ?? ?? ?? 80 BF)

registersymbol(noreloadA)
registersymbol(noreloadB)

noreloadA:
  db 90 90

noreloadB:
  db 90 90

[DISABLE]
noreloadA:
  db 2B C5

noreloadB:
  db 2B C5

unregistersymbol(noreloadA)
unregistersymbol(noreloadB)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+117447A

"RDR2.exe"+117445B: 75 10                    -  jne RDR2.exe+117446D
"RDR2.exe"+117445D: 0F 57 DB                 -  xorps xmm3,xmm3
"RDR2.exe"+1174460: 0F 57 D2                 -  xorps xmm2,xmm2
"RDR2.exe"+1174463: 8B D5                    -  mov edx,ebp
"RDR2.exe"+1174465: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+1174468: E8 FF 5C FC FF           -  call RDR2.exe+113A16C
"RDR2.exe"+117446D: 83 CB FF                 -  or ebx,-01
"RDR2.exe"+1174470: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+1174473: 8B D3                    -  mov edx,ebx
"RDR2.exe"+1174475: E8 66 7E 00 FF           -  call RDR2.exe+17C2E0
// ---------- INJECTING HERE ----------
"RDR2.exe"+117447A: 2B C5                    -  sub eax,ebp
"RDR2.exe"+117447C: 44 8B C3                 -  mov r8d,ebx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+117447F: 8B D0                    -  mov edx,eax
"RDR2.exe"+1174481: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+1174484: E8 C7 19 FF FF           -  call RDR2.exe+1165E50
"RDR2.exe"+1174489: 8B 9F C8 00 00 00        -  mov ebx,[rdi+000000C8]
"RDR2.exe"+117448F: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+1174492: 8B D3                    -  mov edx,ebx
"RDR2.exe"+1174494: E8 53 70 50 FF           -  call RDR2.exe+67B4EC
"RDR2.exe"+1174499: 2B C5                    -  sub eax,ebp
"RDR2.exe"+117449B: 44 8B C3                 -  mov r8d,ebx
"RDR2.exe"+117449E: 8B D0                    -  mov edx,eax
}

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+1174499

"RDR2.exe"+1174475: E8 66 7E 00 FF           -  call RDR2.exe+17C2E0
"RDR2.exe"+117447A: 2B C5                    -  sub eax,ebp
"RDR2.exe"+117447C: 44 8B C3                 -  mov r8d,ebx
"RDR2.exe"+117447F: 8B D0                    -  mov edx,eax
"RDR2.exe"+1174481: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+1174484: E8 C7 19 FF FF           -  call RDR2.exe+1165E50
"RDR2.exe"+1174489: 8B 9F C8 00 00 00        -  mov ebx,[rdi+000000C8]
"RDR2.exe"+117448F: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+1174492: 8B D3                    -  mov edx,ebx
"RDR2.exe"+1174494: E8 53 70 50 FF           -  call RDR2.exe+67B4EC
// ---------- INJECTING HERE ----------
"RDR2.exe"+1174499: 2B C5                    -  sub eax,ebp
"RDR2.exe"+117449B: 44 8B C3                 -  mov r8d,ebx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+117449E: 8B D0                    -  mov edx,eax
"RDR2.exe"+11744A0: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+11744A3: E8 D0 1A FF FF           -  call RDR2.exe+1165F78
"RDR2.exe"+11744A8: 80 BF B0 00 00 00 00     -  cmp byte ptr [rdi+000000B0],00
"RDR2.exe"+11744AF: 0F 84 A0 00 00 00        -  je RDR2.exe+1174555
"RDR2.exe"+11744B5: 8B 87 C8 00 00 00        -  mov eax,[rdi+000000C8]
"RDR2.exe"+11744BB: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+11744BE: 48 6B D8 68              -  imul rbx,rax,68
"RDR2.exe"+11744C2: 8B D0                    -  mov edx,eax
"RDR2.exe"+11744C4: 48 03 9F B8 00 00 00     -  add rbx,[rdi+000000B8]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"No Weapon Degradation"</Description>
          <LastState/>
          <Color>000080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(weapondegradation,RDR2.exe,F3 41 0F 58 F8 0F 28 CF)

registersymbol(weapondegradation)

weapondegradation:
  xorps xmm7,xmm7
  nop 2

[DISABLE]
weapondegradation:
  db F3 41 0F 58 F8

unregistersymbol(weapondegradation)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+113A3A8

"RDR2.exe"+113A37D: E8 AA CA 02 00           -  call RDR2.exe+1166E2C
"RDR2.exe"+113A382: 0F 57 C9                 -  xorps xmm1,xmm1
"RDR2.exe"+113A385: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+113A388: E8 5B ED 02 00           -  call RDR2.exe+11690E8
"RDR2.exe"+113A38D: 0F 57 C9                 -  xorps xmm1,xmm1
"RDR2.exe"+113A390: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+113A393: E8 94 BF 02 00           -  call RDR2.exe+116632C
"RDR2.exe"+113A398: F3 0F 10 BB D0 00 00 00  -  movss xmm7,[rbx+000000D0]
"RDR2.exe"+113A3A0: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+113A3A3: F3 45 0F 59 C3           -  mulss xmm8,xmm11
// ---------- INJECTING HERE ----------
"RDR2.exe"+113A3A8: F3 41 0F 58 F8           -  addss xmm7,xmm8
// ---------- DONE INJECTING  ----------
"RDR2.exe"+113A3AD: 0F 28 CF                 -  movaps xmm1,xmm7
"RDR2.exe"+113A3B0: E8 A7 C9 02 00           -  call RDR2.exe+1166D5C
"RDR2.exe"+113A3B5: 48 8B 87 70 0A 00 00     -  mov rax,[rdi+00000A70]
"RDR2.exe"+113A3BC: F3 0F 10 58 24           -  movss xmm3,[rax+24]
"RDR2.exe"+113A3C1: 0F 2F DE                 -  comiss xmm3,xmm6
"RDR2.exe"+113A3C4: 72 50                    -  jb RDR2.exe+113A416
"RDR2.exe"+113A3C6: F3 41 0F 5C F9           -  subss xmm7,xmm9
"RDR2.exe"+113A3CB: 0F 2F FE                 -  comiss xmm7,xmm6
"RDR2.exe"+113A3CE: 73 05                    -  jae RDR2.exe+113A3D5
"RDR2.exe"+113A3D0: 0F 57 FF                 -  xorps xmm7,xmm7
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>87</ID>
          <Description>"Jammed Enemy Weapon"</Description>
          <LastState/>
          <Color>000080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(jammed,RDR2.exe,F3 0F 7F 45 07 ?? ?? ?? ?? ?? 44 8A F0 EB 03 45 8A F4 48 8B 13 48 85 D2)

alloc(newmem,1024,jammed) //"RDR2.exe"+111BA13

label(return)

registersymbol(jammed)

newmem:
  movdqu [rbp+07],xmm0 //original
  test rcx,rcx
  je @f
  cmp [baseWeapon],rcx
  jne jammed+A
@@:
  jmp return

jammed:
  jmp newmem
return:

[DISABLE]
jammed:
  db F3 0F 7F 45 07

unregistersymbol(jammed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+111BA13

"RDR2.exe"+111B9E9: F3 0F 11 46 28           -  movss [rsi+28],xmm0
"RDR2.exe"+111B9EE: EB 35                    -  jmp RDR2.exe+111BA25
"RDR2.exe"+111B9F0: 41 0F 10 06              -  movups xmm0,[r14]
"RDR2.exe"+111B9F4: 4C 8D 4D 07              -  lea r9,[rbp+07]
"RDR2.exe"+111B9F8: F3 0F 11 4C 24 28        -  movss [rsp+28],xmm1
"RDR2.exe"+111B9FE: 4C 8D 45 F7              -  lea r8,[rbp-09]
"RDR2.exe"+111BA02: 48 8B D3                 -  mov rdx,rbx
"RDR2.exe"+111BA05: F3 0F 11 74 24 20        -  movss [rsp+20],xmm6
"RDR2.exe"+111BA0B: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+111BA0E: 66 0F 7F 7D F7           -  movdqa [rbp-09],xmm7
// ---------- INJECTING HERE ----------
"RDR2.exe"+111BA13: F3 0F 7F 45 07           -  movdqu [rbp+07],xmm0
// ---------- DONE INJECTING  ----------
"RDR2.exe"+111BA18: E8 DB 00 00 00           -  call RDR2.exe+111BAF8
"RDR2.exe"+111BA1D: 44 8A F0                 -  mov r14l,al
"RDR2.exe"+111BA20: EB 03                    -  jmp RDR2.exe+111BA25
"RDR2.exe"+111BA22: 45 8A F4                 -  mov r14l,r12l
"RDR2.exe"+111BA25: 48 8B 13                 -  mov rdx,[rbx]
"RDR2.exe"+111BA28: 48 85 D2                 -  test rdx,rdx
"RDR2.exe"+111BA2B: 0F 84 97 00 00 00        -  je RDR2.exe+111BAC8
"RDR2.exe"+111BA31: 80 7A 30 04              -  cmp byte ptr [rdx+30],04
"RDR2.exe"+111BA35: 0F 85 8D 00 00 00        -  jne RDR2.exe+111BAC8
"RDR2.exe"+111BA3B: 48 8B 47 60              -  mov rax,[rdi+60]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"[Crafting]"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>54</ID>
          <Description>"Free Crafting (Pearson)"</Description>
          <LastState/>
          <Color>000080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(freecrafting,RDR2.exe,39 43 08 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 48 83 C3 08 C7 03) //"RDR2.exe"+2A1669D
aobscanmodule(jnldest,RDR2.exe,4C 2B CE ?? ?? ?? ?? ?? 49 8B 08 48 83 EB 08 8B 13 3B 11) //RDR2.exe+2A1712A

alloc(newmem,1024,freecrafting)

label(code)
label(return)

registersymbol(freecrafting)

newmem:
  pushfq
  push rsi
  mov rsi,3683E //Pearson's stuff
  cmp rdx,rsi
  jne code
  xor eax,eax

code:
  pop rsi
  popfq
  cmp [rbx+08],eax
  jnl jnldest
  jmp return

freecrafting:
  jmp newmem
  nop 4
return:

[DISABLE]
freecrafting:
  db 39 43 08 0F 8D 84 0A 00 00

unregistersymbol(freecrafting)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+2A1669D

"RDR2.exe"+2A16679: 48 83 EB 08           -  sub rbx,08
"RDR2.exe"+2A1667D: 39 03                 -  cmp [rbx],eax
"RDR2.exe"+2A1667F: 0F 9F C1              -  setg cl
"RDR2.exe"+2A16682: E9 13 FE FF FF        -  jmp RDR2.exe+2A1649A
"RDR2.exe"+2A16687: 48 FF C7              -  inc rdi
"RDR2.exe"+2A1668A: 0F B6 07              -  movzx eax,byte ptr [rdi]
"RDR2.exe"+2A1668D: E9 F0 0B 00 00        -  jmp RDR2.exe+2A17282
"RDR2.exe"+2A16692: 41 8B 00              -  mov eax,[r8]
"RDR2.exe"+2A16695: 4C 8D 4F 02           -  lea r9,[rdi+02]
"RDR2.exe"+2A16699: 48 83 EB 10           -  sub rbx,10
// ---------- INJECTING HERE ----------
"RDR2.exe"+2A1669D: 39 43 08              -  cmp [rbx+08],eax
"RDR2.exe"+2A166A0: 0F 8D 84 0A 00 00     -  jnl RDR2.exe+2A1712A
// ---------- DONE INJECTING  ----------
"RDR2.exe"+2A166A6: E9 46 06 00 00        -  jmp RDR2.exe+2A16CF1
"RDR2.exe"+2A166AB: 48 83 C3 08           -  add rbx,08
"RDR2.exe"+2A166AF: C7 03 01 00 00 00     -  mov [rbx],00000001
"RDR2.exe"+2A166B5: E9 A3 F8 FF FF        -  jmp RDR2.exe+2A15F5D
"RDR2.exe"+2A166BA: 49 8B 08              -  mov rcx,[r8]
"RDR2.exe"+2A166BD: 48 83 EB 08           -  sub rbx,08
"RDR2.exe"+2A166C1: 8B 13                 -  mov edx,[rbx]
"RDR2.exe"+2A166C3: 3B 11                 -  cmp edx,[rcx]
"RDR2.exe"+2A166C5: 0F 83 B8 11 00 00     -  jae RDR2.exe+2A17883
"RDR2.exe"+2A166CB: 48 FF C7              -  inc rdi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>60</ID>
          <Description>"Don't Consume Items"</Description>
          <LastState/>
          <Color>000080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(dontconsumeitems,RDR2.exe,49 2B D4 4D 8B C6)

registersymbol(dontconsumeitems)

dontconsumeitems:
  db 90 90 90

[DISABLE]
dontconsumeitems:
  db 49 2B D4

unregistersymbol(dontconsumeitems)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+7449D0

"RDR2.exe"+7449AE: 48 8B 07           -  mov rax,[rdi]
"RDR2.exe"+7449B1: 48 8D 55 48        -  lea rdx,[rbp+48]
"RDR2.exe"+7449B5: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+7449B8: FF 50 08           -  call qword ptr [rax+08]
"RDR2.exe"+7449BB: 48 8B 57 28        -  mov rdx,[rdi+28]
"RDR2.exe"+7449BF: 8B 00              -  mov eax,[rax]
"RDR2.exe"+7449C1: 89 45 48           -  mov [rbp+48],eax
"RDR2.exe"+7449C4: 49 3B D4           -  cmp rdx,r12
"RDR2.exe"+7449C7: 0F 8C 3E 01 00 00  -  jl RDR2.exe+744B0B
"RDR2.exe"+7449CD: 48 8B 07           -  mov rax,[rdi]
// ---------- INJECTING HERE ----------
"RDR2.exe"+7449D0: 49 2B D4           -  sub rdx,r12
"RDR2.exe"+7449D3: 4D 8B C6           -  mov r8,r14
// ---------- DONE INJECTING  ----------
"RDR2.exe"+7449D6: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+7449D9: FF 50 78           -  call qword ptr [rax+78]
"RDR2.exe"+7449DC: B8 01 00 00 00     -  mov eax,00000001
"RDR2.exe"+7449E1: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+7449E4: 48 39 47 28        -  cmp [rdi+28],rax
"RDR2.exe"+7449E8: 0F 8D 3F 01 00 00  -  jnl RDR2.exe+744B2D
"RDR2.exe"+7449EE: 48 8B 07           -  mov rax,[rdi]
"RDR2.exe"+7449F1: FF 50 20           -  call qword ptr [rax+20]
"RDR2.exe"+7449F4: 44 8B 6D 68        -  mov r13d,[rbp+68]
"RDR2.exe"+7449F8: EB 24              -  jmp RDR2.exe+744A1E
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>84</ID>
      <Description>"[Law]"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>4080FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(bounty,RDR2.exe,8B 88 EC 3D 00 00 F3 0F 59 C2) //"RDR2.exe"+2F9F291
alloc(newmem,1024,bounty)

label(code)
label(return)

registersymbol(bounty)

//------------------------
label(baseLaw)
registersymbol(baseLaw)
//------------------------

newmem:
  mov [baseLaw],rax

code:
  mov ecx,[rax+00003DEC]
  jmp return

baseLaw:
  dq 0

bounty:
  jmp newmem
  nop
return:

[DISABLE]
bounty:
  db 8B 88 EC 3D 00 00

unregistersymbol(bounty)
unregistersymbol(baseLaw)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+2F9F291

"RDR2.exe"+2F9F260: 80 7B 14 00              -  cmp byte ptr [rbx+14],00
"RDR2.exe"+2F9F264: 74 12                    -  je RDR2.exe+2F9F278
"RDR2.exe"+2F9F266: F6 80 3A 3E 00 00 10     -  test byte ptr [rax+00003E3A],10
"RDR2.exe"+2F9F26D: 74 4D                    -  je RDR2.exe+2F9F2BC
"RDR2.exe"+2F9F26F: 83 B8 D8 3D 00 00 00     -  cmp dword ptr [rax+00003DD8],00
"RDR2.exe"+2F9F276: 7E 44                    -  jle RDR2.exe+2F9F2BC
"RDR2.exe"+2F9F278: F3 0F 10 43 18           -  movss xmm0,[rbx+18]
"RDR2.exe"+2F9F27D: F3 0F 10 15 AB 74 25 00  -  movss xmm2,[RDR2.exe+31F6730]
"RDR2.exe"+2F9F285: F3 0F 10 4B 1C           -  movss xmm1,[rbx+1C]
"RDR2.exe"+2F9F28A: 0F 2F 0D EF 73 25 00     -  comiss xmm1,[RDR2.exe+31F6680]
// ---------- INJECTING HERE ----------
"RDR2.exe"+2F9F291: 8B 88 EC 3D 00 00        -  mov ecx,[rax+00003DEC]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+2F9F297: F3 0F 59 C2              -  mulss xmm0,xmm2
"RDR2.exe"+2F9F29B: F3 0F 2C D0              -  cvttss2si edx,xmm0
"RDR2.exe"+2F9F29F: 72 0A                    -  jb RDR2.exe+2F9F2AB
"RDR2.exe"+2F9F2A1: F3 0F 59 CA              -  mulss xmm1,xmm2
"RDR2.exe"+2F9F2A5: F3 0F 2C C1              -  cvttss2si eax,xmm1
"RDR2.exe"+2F9F2A9: EB 05                    -  jmp RDR2.exe+2F9F2B0
"RDR2.exe"+2F9F2AB: B8 FF FF FF 7F           -  mov eax,7FFFFFFF
"RDR2.exe"+2F9F2B0: 3B CA                    -  cmp ecx,edx
"RDR2.exe"+2F9F2B2: 7E 08                    -  jle RDR2.exe+2F9F2BC
"RDR2.exe"+2F9F2B4: 3B C8                    -  cmp ecx,eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>85</ID>
          <Description>"Current Bounty"</Description>
          <Color>FF0080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>baseLaw</Address>
          <Offsets>
            <Offset>3DEC</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>114</ID>
      <Description>"[Movement]"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(getmptr,RDR2.exe,EB 23 F3 41 0F 6F 47 70)
aobscanmodule(retloc,RDR2.exe,F3 0F 11 85 20 02 00 00 45)
alloc(newmem,1024,getmptr) //"RDR2.exe"+66F443

label(code)
label(return)

registersymbol(getmptr)

//-------------------
label(baseM)
registersymbol(baseM)
//-------------------

newmem:
  push rsi
  mov rsi,retloc
  cmp [rsp+138+8],rsi
  jne code
  mov [baseM],r15

code:
  pop rsi
  movdqu xmm0,[r15+70]
  jmp return

baseM:
  dq 0

getmptr+02:
  jmp newmem
  nop
return:

[DISABLE]
getmptr+02:
  db F3 41 0F 6F 47 70

unregistersymbol(getmptr)
unregistersymbol(baseM)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+66F443

"RDR2.exe"+66F419: E8 B2 2A CE FF        -  call RDR2.exe+351ED0
"RDR2.exe"+66F41E: 0F 28 55 87           -  movaps xmm2,[rbp-79]
"RDR2.exe"+66F422: 66 0F 6F C2           -  movdqa xmm0,xmm2
"RDR2.exe"+66F426: 66 0F 69 C2           -  punpckhwd xmm0,xmm2
"RDR2.exe"+66F42A: 66 0F 72 E0 10        -  psrad xmm0,10
"RDR2.exe"+66F42F: 0F 5B C0              -  cvtdq2ps xmm0,xmm0
"RDR2.exe"+66F432: 66 0F 70 C8 EE        -  pshufd xmm1,xmm0-12
"RDR2.exe"+66F437: 0F 59 0D 32 82 B8 02  -  mulps xmm1,[RDR2.exe+31F7670]
"RDR2.exe"+66F43E: 0F 58 CA              -  addps xmm1,xmm2
"RDR2.exe"+66F441: EB 23                 -  jmp RDR2.exe+66F466
// ---------- INJECTING HERE ----------
"RDR2.exe"+66F443: F3 41 0F 6F 47 70     -  movdqu xmm0,[r15+70]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+66F449: 66 0F 69 C0           -  punpckhwd xmm0,xmm0
"RDR2.exe"+66F44D: 66 0F 72 E0 10        -  psrad xmm0,10
"RDR2.exe"+66F452: 0F 5B C0              -  cvtdq2ps xmm0,xmm0
"RDR2.exe"+66F455: 66 0F 70 C8 EE        -  pshufd xmm1,xmm0-12
"RDR2.exe"+66F45A: 0F 59 0D 0F 82 B8 02  -  mulps xmm1,[RDR2.exe+31F7670]
"RDR2.exe"+66F461: 41 0F 58 4F 70        -  addps xmm1,[r15+70]
"RDR2.exe"+66F466: 0F 29 4C 24 20        -  movaps [rsp+20],xmm1
"RDR2.exe"+66F46B: 48 8D 7C 24 20        -  lea rdi,[rsp+20]
"RDR2.exe"+66F470: F3 0F 6F 37           -  movdqu xmm6,[rdi]
"RDR2.exe"+66F474: 33 C9                 -  xor ecx,ecx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>119</ID>
          <Description>"Movement Speed Boost"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(speed,RDR2.exe,41 40 66 0F 6B F6 0F 5C E9 0F 28 CA 0F C6 EB) //"RDR2.exe"+27876E2
alloc(newmem,1024,speed)

label(code)
label(return)

registersymbol(speed)

//-------------------------
label(multiplier)
registersymbol(multiplier)
label(_multiplier)
registersymbol(_multiplier)
//-------------------------

newmem:
  pushfq
  push rsi
  sub rsp,20

  mov esi,[_multiplier]
  mov [multiplier],esi
  mov [multiplier+4],esi
  mov [multiplier+4+4],esi

  mov rsi,[baseM]
  cmp rcx,rsi
  jne code

  movdqu [rsp],xmm7
  movdqu [rsp+10],xmm0

  movdqu xmm0,[rcx+70]
  punpckhwd xmm0,xmm0
  psrad xmm0,10
  cvtdq2ps xmm0,xmm0
  pshufd xmm7,xmm0,-12
  mulps xmm7,[RDR2.exe+3239AC0]
  addps xmm7,[rcx+70]

  subps xmm5,xmm7
  movdqu xmm0,[multiplier]
  mulps xmm5,xmm0
  addps xmm5,xmm7

  movdqu xmm7,[rsp]
  movdqu xmm0,[rsp+10]

code:
  add rsp,20
  pop rsi
  popfq
  packssdw xmm6,xmm6
  subps xmm5,xmm1
  jmp return

_multiplier:
  dd (float)2
multiplier:
  dd (float)2
  dd (float)2
  dd (float)2
  dd (float)1

speed+02:
  jmp newmem
  nop 2
return:

[DISABLE]
speed+02:
  db 66 0F 6B F6 0F 5C E9

unregistersymbol(speed)
unregistersymbol(multiplier)
unregistersymbol(_multiplier)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+27876E2

"RDR2.exe"+27876BD: 0F 59 D1                 -  mulps xmm2,xmm1
"RDR2.exe"+27876C0: 0F 58 D1                 -  addps xmm2,xmm1
"RDR2.exe"+27876C3: 0F 59 D3                 -  mulps xmm2,xmm3
"RDR2.exe"+27876C6: F3 0F 5B C2              -  cvttps2dq xmm0,xmm2
"RDR2.exe"+27876CA: 0F 28 54 24 30           -  movaps xmm2,[rsp+30]
"RDR2.exe"+27876CF: 0F 5B C8                 -  cvtdq2ps xmm1,xmm0
"RDR2.exe"+27876D2: 0F 28 44 24 20           -  movaps xmm0,[rsp+20]
"RDR2.exe"+27876D7: F3 0F 5B F1              -  cvttps2dq xmm6,xmm1
"RDR2.exe"+27876DB: 0F 59 CC                 -  mulps xmm1,xmm4
"RDR2.exe"+27876DE: 0F 11 41 40              -  movups [rcx+40],xmm0
// ---------- INJECTING HERE ----------
"RDR2.exe"+27876E2: 66 0F 6B F6              -  packssdw xmm6,xmm6
"RDR2.exe"+27876E6: 0F 5C E9                 -  subps xmm5,xmm1
// ---------- DONE INJECTING  ----------
"RDR2.exe"+27876E9: 0F 28 CA                 -  movaps xmm1,xmm2
"RDR2.exe"+27876EC: 0F C6 EB E4              -  shufps xmm5,xmm3,-1C
"RDR2.exe"+27876F0: 0F 57 DB                 -  xorps xmm3,xmm3
"RDR2.exe"+27876F3: 0F C6 CB CE              -  shufps xmm1,xmm3,-32
"RDR2.exe"+27876F7: 0F C6 D1 84              -  shufps xmm2,xmm1,-7C
"RDR2.exe"+27876FB: 0F 28 4C 24 40           -  movaps xmm1,[rsp+40]
"RDR2.exe"+2787700: 0F 28 C1                 -  movaps xmm0,xmm1
"RDR2.exe"+2787703: 0F 11 51 50              -  movups [rcx+50],xmm2
"RDR2.exe"+2787707: 0F C6 C3 EE              -  shufps xmm0,xmm3,-12
"RDR2.exe"+278770B: 0F C6 C8 84              -  shufps xmm1,xmm0,-7C
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>123</ID>
              <Description>"multiplier"</Description>
              <VariableType>Float</VariableType>
              <Address>_multiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>56</ID>
      <Description>"Debug"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>93</ID>
          <Description>"baseWeapon"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>baseWeapon</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>94</ID>
          <Description>"baseLaw"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>baseLaw</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"baseM"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>0000FF</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>baseM</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>117</ID>
              <Description>"X"</Description>
              <VariableType>Float</VariableType>
              <Address>baseM</Address>
              <Offsets>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>116</ID>
              <Description>"Y"</Description>
              <VariableType>Float</VariableType>
              <Address>baseM</Address>
              <Offsets>
                <Offset>78</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>118</ID>
              <Description>"Z"</Description>
              <VariableType>Float</VariableType>
              <Address>baseM</Address>
              <Offsets>
                <Offset>74</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16168</ID>
      <Description>"Enable"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(healthh,RDR2.exe,0F 28 F0 48 83 EB 08) // should be unique
alloc(newmem,$1000,healthh)

label(code)
label(return)
registersymbol(staminastruct)
label(staminastruct)
registersymbol(healthstruct)
label(healthstruct)
registersymbol(horsestaminastruct)
label(horsestaminastruct)
registersymbol(deadeyestruct)
label(deadeyestruct)
registersymbol(horsehealthstruct)
label(horsehealthstruct)

newmem:
cmp rdi, [staminastruct]
je code
cmp rdi, [healthstruct]
je code
cmp rdi, [horsestaminastruct]
je code
cmp rdi, [deadeyestruct]
je code
cmp rdi, [horsehealthstruct]
je code
mov rcx,[rbx]
test rcx,rcx
jmp return
code:
mov rcx,[rbx]
cmp rcx, rcx
  jmp return

staminastruct:
dq 0

healthstruct:
dq 0

horsestaminastruct:
dq 0

deadeyestruct:
dq 0

horsehealthstruct:
dq 0

healthh-10:
  jmp newmem
  nop
return:
registersymbol(healthh)

[DISABLE]

healthh-10:
  db 48 8B 0B 48 85 C9

unregistersymbol(healthh)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+6D37BB

"RDR2.exe"+6D3797: 75 B4                 -  jne RDR2.exe+6D374D
"RDR2.exe"+6D3799: BE 01 00 00 00        -  mov esi,00000001
"RDR2.exe"+6D379E: 48 8D 5F 58           -  lea rbx,[rdi+58]
"RDR2.exe"+6D37A2: 0F 2F F7              -  comiss xmm6,xmm7
"RDR2.exe"+6D37A5: 0F 83 46 02 00 00     -  jae RDR2.exe+6D39F1
"RDR2.exe"+6D37AB: 48 8B 0B              -  mov rcx,[rbx]
"RDR2.exe"+6D37AE: 48 85 C9              -  test rcx,rcx
"RDR2.exe"+6D37B1: 74 0B                 -  je RDR2.exe+6D37BE
"RDR2.exe"+6D37B3: 0F 28 CE              -  movaps xmm1,xmm6
"RDR2.exe"+6D37B6: E8 69 37 02 00        -  call RDR2.exe+6F6F24
// ---------- INJECTING HERE ----------
"RDR2.exe"+6D37BB: 0F 28 F0              -  movaps xmm6,xmm0
"RDR2.exe"+6D37BE: 48 83 EB 08           -  sub rbx,08
// ---------- DONE INJECTING  ----------
"RDR2.exe"+6D37C2: 83 EE 01              -  sub esi,01
"RDR2.exe"+6D37C5: 79 DB                 -  jns RDR2.exe+6D37A2
"RDR2.exe"+6D37C7: 0F 2F F7              -  comiss xmm6,xmm7
"RDR2.exe"+6D37CA: 0F 83 21 02 00 00     -  jae RDR2.exe+6D39F1
"RDR2.exe"+6D37D0: 45 33 C9              -  xor r9d,r9d
"RDR2.exe"+6D37D3: 44 8A C5              -  mov r8l,bpl
"RDR2.exe"+6D37D6: 0F 28 CE              -  movaps xmm1,xmm6
"RDR2.exe"+6D37D9: 48 8B CF              -  mov rcx,rdi
"RDR2.exe"+6D37DC: E8 D3 FD FF FF        -  call RDR2.exe+6D35B4
"RDR2.exe"+6D37E1: 0F 2F C7              -  comiss xmm0,xmm7
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16169</ID>
          <Description>"Infinite Stamina"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(staminna,RDR2.exe,F3 0F 10 78 20 F6) // should be unique
alloc(newmem,$1000,staminna)

label(code)
label(return)


newmem:
mov [staminastruct],rax
code:
  movss xmm7,[rax+20]
  jmp return



staminna:
  jmp newmem
return:
registersymbol(staminna)

[DISABLE]

staminna:
  db F3 0F 10 78 20

unregistersymbol(staminna)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+C9BD56

"RDR2.exe"+C9BD2E: 0F 29 7C 24 20              -  movaps [rsp+20],xmm7
"RDR2.exe"+C9BD33: E8 C0 E2 FD FF              -  call RDR2.exe+C79FF8
"RDR2.exe"+C9BD38: 48 8B C8                    -  mov rcx,rax
"RDR2.exe"+C9BD3B: E8 48 BB F4 FF              -  call RDR2.exe+BE7888
"RDR2.exe"+C9BD40: 48 8B F8                    -  mov rdi,rax
"RDR2.exe"+C9BD43: 48 85 C0                    -  test rax,rax
"RDR2.exe"+C9BD46: 74 64                       -  je RDR2.exe+C9BDAC
"RDR2.exe"+C9BD48: 48 8B C8                    -  mov rcx,rax
"RDR2.exe"+C9BD4B: E8 60 FB 45 FF              -  call RDR2.exe+FB8B0
"RDR2.exe"+C9BD50: 8A 8B 80 90 00 00           -  mov cl,[rbx+00009080]
// ---------- INJECTING HERE ----------
"RDR2.exe"+C9BD56: F3 0F 10 78 20              -  movss xmm7,[rax+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+C9BD5B: F6 C1 40                    -  test cl,40
"RDR2.exe"+C9BD5E: 74 33                       -  je RDR2.exe+C9BD93
"RDR2.exe"+C9BD60: F3 0F 10 35 DC 23 23 04     -  movss xmm6,[RDR2.exe+4ECE144]
"RDR2.exe"+C9BD68: 48 8B CF                    -  mov rcx,rdi
"RDR2.exe"+C9BD6B: E8 40 FB 45 FF              -  call RDR2.exe+FB8B0
"RDR2.exe"+C9BD70: F3 0F 10 40 24              -  movss xmm0,[rax+24]
"RDR2.exe"+C9BD75: 0F 2F C6                    -  comiss xmm0,xmm6
"RDR2.exe"+C9BD78: 77 0B                       -  ja RDR2.exe+C9BD85
"RDR2.exe"+C9BD7A: 0F 28 F0                    -  movaps xmm6,xmm0
"RDR2.exe"+C9BD7D: F3 0F 59 35 AB 07 55 02     -  mulss xmm6,[RDR2.exe+31EC530]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16173</ID>
          <Description>"Infinite Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(gethealthh,RDR2.exe,48 8B 48 10 0F 2F 41 20 72 05 40 B6 01 EB 03 40 32 F6 4D) // should be unique
alloc(newmem,$1000,gethealthh)

label(code)
label(return)


newmem:

code:
  mov rcx,[rax+10]
  mov [healthstruct],rcx
  comiss xmm0,[rcx+20]
  jmp return

gethealthh:
  jmp newmem
  nop 3
return:
registersymbol(gethealthh)

[DISABLE]

gethealthh:
  db 48 8B 48 10 0F 2F 41 20

unregistersymbol(gethealthh)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+140B116

"RDR2.exe"+140B0EE: 0F 57 C0                 -  xorps xmm0,xmm0
"RDR2.exe"+140B0F1: 41 23 CB                 -  and ecx,r11d
"RDR2.exe"+140B0F4: 41 2B CA                 -  sub ecx,r10d
"RDR2.exe"+140B0F7: 48 69 D1 48 01 00 00     -  imul rdx,rcx,00000148
"RDR2.exe"+140B0FE: 4A 8B 84 0A A0 00 00 00  -  mov rax,[rdx+r9+000000A0]
"RDR2.exe"+140B106: 48 8B C8                 -  mov rcx,rax
"RDR2.exe"+140B109: 48 83 E1 FE              -  and rcx,-02
"RDR2.exe"+140B10D: 48 F7 D8                 -  neg rax
"RDR2.exe"+140B110: 48 1B C0                 -  sbb rax,rax
"RDR2.exe"+140B113: 48 23 C1                 -  and rax,rcx
// ---------- INJECTING HERE ----------
"RDR2.exe"+140B116: 48 8B 48 10              -  mov rcx,[rax+10]
"RDR2.exe"+140B11A: 0F 2F 41 20              -  comiss xmm0,[rcx+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+140B11E: 72 05                    -  jb RDR2.exe+140B125
"RDR2.exe"+140B120: 40 B6 01                 -  mov sil,01
"RDR2.exe"+140B123: EB 03                    -  jmp RDR2.exe+140B128
"RDR2.exe"+140B125: 40 32 F6                 -  xor sil,sil
"RDR2.exe"+140B128: 4D 85 C0                 -  test r8,r8
"RDR2.exe"+140B12B: 74 3E                    -  je RDR2.exe+140B16B
"RDR2.exe"+140B12D: 41 8B 80 9C 00 00 00     -  mov eax,[r8+0000009C]
"RDR2.exe"+140B134: 41 23 C3                 -  and eax,r11d
"RDR2.exe"+140B137: 41 2B C2                 -  sub eax,r10d
"RDR2.exe"+140B13A: 48 69 C8 48 01 00 00     -  imul rcx,rax,00000148
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16187</ID>
          <Description>"Infinite Horse Stamina"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(horseystamina,RDR2.exe,F3 0F 10 40 20 EB 17) // should be unique
alloc(newmem,$1000,horseystamina)

label(code)
label(return)


newmem:
mov [horsestaminastruct],rax
code:
  movss xmm0,[rax+20]
  jmp return



horseystamina:
  jmp newmem
return:
registersymbol(horseystamina)

[DISABLE]

horseystamina:
  db F3 0F 10 40 20

unregistersymbol(horseystamina)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+F97AB8

"RDR2.exe"+F97A96: E8 19 FD 48 FF           -  call RDR2.exe+4277B4
"RDR2.exe"+F97A9B: 48 8B D8                 -  mov rbx,rax
"RDR2.exe"+F97A9E: 48 85 C0                 -  test rax,rax
"RDR2.exe"+F97AA1: 74 30                    -  je RDR2.exe+F97AD3
"RDR2.exe"+F97AA3: 48 8B C8                 -  mov rcx,rax
"RDR2.exe"+F97AA6: E8 DD FD C4 FF           -  call RDR2.exe+BE7888
"RDR2.exe"+F97AAB: 48 85 C0                 -  test rax,rax
"RDR2.exe"+F97AAE: 74 0F                    -  je RDR2.exe+F97ABF
"RDR2.exe"+F97AB0: 48 8B C8                 -  mov rcx,rax
"RDR2.exe"+F97AB3: E8 F8 3D 16 FF           -  call RDR2.exe+FB8B0
// ---------- INJECTING HERE ----------
"RDR2.exe"+F97AB8: F3 0F 10 40 20           -  movss xmm0,[rax+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+F97ABD: EB 17                    -  jmp RDR2.exe+F97AD6
"RDR2.exe"+F97ABF: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+F97AC2: E8 45 B3 C6 FF           -  call RDR2.exe+C02E0C
"RDR2.exe"+F97AC7: 48 85 C0                 -  test rax,rax
"RDR2.exe"+F97ACA: 74 07                    -  je RDR2.exe+F97AD3
"RDR2.exe"+F97ACC: F3 0F 10 40 08           -  movss xmm0,[rax+08]
"RDR2.exe"+F97AD1: EB 03                    -  jmp RDR2.exe+F97AD6
"RDR2.exe"+F97AD3: 0F 57 C0                 -  xorps xmm0,xmm0
"RDR2.exe"+F97AD6: 48 83 C4 20              -  add rsp,20
"RDR2.exe"+F97ADA: 5B                       -  pop rbx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16189</ID>
          <Description>"Infinite Dead Eye"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(deadyee,RDR2.exe,CD FF 48 8B 90 98 00 00 00 F3 0F 10 40 20) // should be unique
alloc(newmem,$1000,deadyee)

label(code)
label(return)

newmem:
mov [deadeyestruct],rax
code:
  movss xmm0,[rax+20]
  jmp return

deadyee+09:
  jmp newmem
return:
registersymbol(deadyee)

[DISABLE]

deadyee+09:
  db F3 0F 10 40 20

unregistersymbol(deadyee)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+F9A3F9

"RDR2.exe"+F9A3D5: 48 1B C9                 -  sbb rcx,rcx
"RDR2.exe"+F9A3D8: 48 23 C8                 -  and rcx,rax
"RDR2.exe"+F9A3DB: 74 09                    -  je RDR2.exe+F9A3E6
"RDR2.exe"+F9A3DD: 48 8B 89 70 92 00 00     -  mov rcx,[rcx+00009270]
"RDR2.exe"+F9A3E4: EB 02                    -  jmp RDR2.exe+F9A3E8
"RDR2.exe"+F9A3E6: 33 C9                    -  xor ecx,ecx
"RDR2.exe"+F9A3E8: 48 85 C9                 -  test rcx,rcx
"RDR2.exe"+F9A3EB: 74 3E                    -  je RDR2.exe+F9A42B
"RDR2.exe"+F9A3ED: E8 92 7A CD FF           -  call RDR2.exe+C71E84
"RDR2.exe"+F9A3F2: 48 8B 90 98 00 00 00     -  mov rdx,[rax+00000098]
// ---------- INJECTING HERE ----------
"RDR2.exe"+F9A3F9: F3 0F 10 40 20           -  movss xmm0,[rax+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+F9A3FE: 44 8B 42 04              -  mov r8d,[rdx+04]
"RDR2.exe"+F9A402: 8B 12                    -  mov edx,[rdx]
"RDR2.exe"+F9A404: 41 C1 C0 10              -  rol r8d,10
"RDR2.exe"+F9A408: 41 C1 C8 05              -  ror r8d,05
"RDR2.exe"+F9A40C: 41 33 D0                 -  xor edx,r8d
"RDR2.exe"+F9A40F: 41 8B C8                 -  mov ecx,r8d
"RDR2.exe"+F9A412: 83 E1 0F                 -  and ecx,0F
"RDR2.exe"+F9A415: 83 C1 02                 -  add ecx,02
"RDR2.exe"+F9A418: D3 C2                    -  rol edx,cl
"RDR2.exe"+F9A41A: C1 C2 10                 -  rol edx,10
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16191</ID>
          <Description>"Infinite Horse Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(horseyhealt,RDR2.exe,48 8B 48 10 0F 2F 41 20 0F 82 79) // should be unique
alloc(newmem,$1000,horseyhealt)

label(code)
label(return)

newmem:

code:
  mov rcx,[rax+10]
  mov [horsehealthstruct],rax
  comiss xmm0,[rcx+20]
  jmp return



horseyhealt:
  jmp newmem
  nop 3
return:
registersymbol(horseyhealt)

[DISABLE]

horseyhealt:
  db 48 8B 48 10 0F 2F 41 20

unregistersymbol(horseyhealt)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+C61685

"RDR2.exe"+C61653: 8B 90 BC 00 00 00        -  mov edx,[rax+000000BC]
"RDR2.exe"+C61659: C1 E2 1D                 -  shl edx,1D
"RDR2.exe"+C6165C: 85 D2                    -  test edx,edx
"RDR2.exe"+C6165E: 7F 33                    -  jg RDR2.exe+C61693
"RDR2.exe"+C61660: 48 8D 95 08 06 00 00     -  lea rdx,[rbp+00000608]
"RDR2.exe"+C61667: 48 89 BD 08 06 00 00     -  mov [rbp+00000608],rdi
"RDR2.exe"+C6166E: 49 8D 8C 24 9C 00 00 00  -  lea rcx,[r12+0000009C]
"RDR2.exe"+C61676: E8 05 9C 9E FF           -  call RDR2.exe+64B280
"RDR2.exe"+C6167B: 48 8B 85 08 06 00 00     -  mov rax,[rbp+00000608]
"RDR2.exe"+C61682: 0F 57 C0                 -  xorps xmm0,xmm0
// ---------- INJECTING HERE ----------
"RDR2.exe"+C61685: 48 8B 48 10              -  mov rcx,[rax+10]
"RDR2.exe"+C61689: 0F 2F 41 20              -  comiss xmm0,[rcx+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+C6168D: 0F 82 79 06 00 00        -  jb RDR2.exe+C61D0C
"RDR2.exe"+C61693: 48 8B 4E 08              -  mov rcx,[rsi+08]
"RDR2.exe"+C61697: E8 8C 3C 70 00           -  call RDR2.exe+1365328
"RDR2.exe"+C6169C: 48 8B 56 08              -  mov rdx,[rsi+08]
"RDR2.exe"+C616A0: F6 DB                    -  neg bl
"RDR2.exe"+C616A2: 49 8B 8E 80 10 00 00     -  mov rcx,[r14+00001080]
"RDR2.exe"+C616A9: 4C 8B C8                 -  mov r9,rax
"RDR2.exe"+C616AC: 45 1B C0                 -  sbb r8d,r8d
"RDR2.exe"+C616AF: 44 88 7C 24 20           -  mov [rsp+20],r15l
"RDR2.exe"+C616B4: 41 81 E0 00 10 00 00     -  and r8d,00001000
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16193</ID>
      <Description>"No Reload"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(norly,RDR2.exe,2B C5 44 8B C3 8B D0 48 8B CF E8 C7) // should be unique

norly:
nop 2

registersymbol(norly)

[DISABLE]

norly:
  db 2B C5 44 8B C3

unregistersymbol(norly)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+116F58A

"RDR2.exe"+116F56B: 75 10                    -  jne RDR2.exe+116F57D
"RDR2.exe"+116F56D: 0F 57 DB                 -  xorps xmm3,xmm3
"RDR2.exe"+116F570: 0F 57 D2                 -  xorps xmm2,xmm2
"RDR2.exe"+116F573: 8B D5                    -  mov edx,ebp
"RDR2.exe"+116F575: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F578: E8 FF 5C FC FF           -  call RDR2.exe+113527C
"RDR2.exe"+116F57D: 83 CB FF                 -  or ebx,-01
"RDR2.exe"+116F580: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F583: 8B D3                    -  mov edx,ebx
"RDR2.exe"+116F585: E8 3A C2 00 FF           -  call RDR2.exe+17B7C4
// ---------- INJECTING HERE ----------
"RDR2.exe"+116F58A: 2B C5                    -  sub eax,ebp
"RDR2.exe"+116F58C: 44 8B C3                 -  mov r8d,ebx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+116F58F: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F591: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F594: E8 C7 19 FF FF           -  call RDR2.exe+1160F60
"RDR2.exe"+116F599: 8B 9F C8 00 00 00        -  mov ebx,[rdi+000000C8]
"RDR2.exe"+116F59F: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5A2: 8B D3                    -  mov edx,ebx
"RDR2.exe"+116F5A4: E8 53 78 50 FF           -  call RDR2.exe+676DFC
"RDR2.exe"+116F5A9: 2B C5                    -  sub eax,ebp
"RDR2.exe"+116F5AB: 44 8B C3                 -  mov r8d,ebx
"RDR2.exe"+116F5AE: 8B D0                    -  mov edx,eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16194</ID>
      <Description>"Infinite Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ammoy,RDR2.exe,2B C5 44 8B C3) // should be unique
alloc(newmem,$1000,ammoy)

label(code)
label(return)

newmem:
mov eax, #999
code:
//sub eax,ebp
  mov r8d,ebx
  jmp return

ammoy:
  jmp newmem
return:
registersymbol(ammoy)

[DISABLE]

ammoy:
  db 2B C5 44 8B C3

unregistersymbol(ammoy)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+116F5A9

"RDR2.exe"+116F585: E8 3A C2 00 FF           -  call RDR2.exe+17B7C4
"RDR2.exe"+116F58A: 66 90                    -  nop 
"RDR2.exe"+116F58C: 44 8B C3                 -  mov r8d,ebx
"RDR2.exe"+116F58F: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F591: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F594: E8 C7 19 FF FF           -  call RDR2.exe+1160F60
"RDR2.exe"+116F599: 8B 9F C8 00 00 00        -  mov ebx,[rdi+000000C8]
"RDR2.exe"+116F59F: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5A2: 8B D3                    -  mov edx,ebx
"RDR2.exe"+116F5A4: E8 53 78 50 FF           -  call RDR2.exe+676DFC
// ---------- INJECTING HERE ----------
"RDR2.exe"+116F5A9: 2B C5                    -  sub eax,ebp
"RDR2.exe"+116F5AB: 44 8B C3                 -  mov r8d,ebx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+116F5AE: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F5B0: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5B3: E8 D0 1A FF FF           -  call RDR2.exe+1161088
"RDR2.exe"+116F5B8: 80 BF B0 00 00 00 00     -  cmp byte ptr [rdi+000000B0],00
"RDR2.exe"+116F5BF: 0F 84 A0 00 00 00        -  je RDR2.exe+116F665
"RDR2.exe"+116F5C5: 8B 87 C8 00 00 00        -  mov eax,[rdi+000000C8]
"RDR2.exe"+116F5CB: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5CE: 48 6B D8 68              -  imul rbx,rax,68
"RDR2.exe"+116F5D2: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F5D4: 48 03 9F B8 00 00 00     -  add rbx,[rdi+000000B8]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16195</ID>
      <Description>"Infinite Items"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(itemss,RDR2.exe,48 8B 57 28 8B 00) // should be unique
alloc(newmem,$1000,itemss)

label(code)
label(return)

newmem:
mov [rdi+28], #999
code:
  mov rdx,[rdi+28]
  mov eax,[rax]
  jmp return

itemss:
  jmp newmem
  nop
return:
registersymbol(itemss)

[DISABLE]

itemss:
  db 48 8B 57 28 8B 00

unregistersymbol(itemss)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+74030B

"RDR2.exe"+7402EB: 74 0E              -  je RDR2.exe+7402FB
"RDR2.exe"+7402ED: 44 8B 70 08        -  mov r14d,[rax+08]
"RDR2.exe"+7402F1: 44 89 75 40        -  mov [rbp+40],r14d
"RDR2.exe"+7402F5: 4C 8B 75 58        -  mov r14,[rbp+58]
"RDR2.exe"+7402F9: EB 03              -  jmp RDR2.exe+7402FE
"RDR2.exe"+7402FB: 89 5D 40           -  mov [rbp+40],ebx
"RDR2.exe"+7402FE: 48 8B 07           -  mov rax,[rdi]
"RDR2.exe"+740301: 48 8D 55 48        -  lea rdx,[rbp+48]
"RDR2.exe"+740305: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+740308: FF 50 08           -  call qword ptr [rax+08]
// ---------- INJECTING HERE ----------
"RDR2.exe"+74030B: 48 8B 57 28        -  mov rdx,[rdi+28]
"RDR2.exe"+74030F: 8B 00              -  mov eax,[rax]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+740311: 89 45 48           -  mov [rbp+48],eax
"RDR2.exe"+740314: 49 3B D4           -  cmp rdx,r12
"RDR2.exe"+740317: 0F 8C 3E 01 00 00  -  jl RDR2.exe+74045B
"RDR2.exe"+74031D: 48 8B 07           -  mov rax,[rdi]
"RDR2.exe"+740320: 49 2B D4           -  sub rdx,r12
"RDR2.exe"+740323: 4D 8B C6           -  mov r8,r14
"RDR2.exe"+740326: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+740329: FF 50 78           -  call qword ptr [rax+78]
"RDR2.exe"+74032C: B8 01 00 00 00     -  mov eax,00000001
"RDR2.exe"+740331: 48 8B CF           -  mov rcx,rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16220</ID>
      <Description>"Inventory Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(inventoryAob,RDR2.exe,0F B7 57 50 45 33 C0)
alloc(newmem,$1000,inventoryAob)

label(code)
label(return)
label(inventoryPtr)

newmem:
  mov rdx,inventoryPtr
  mov [rdx],rdi
  add [rdx],38
code:
  movzx edx,word ptr [rdi+50]
  xor r8d,r8d
  jmp return

inventoryPtr:
  dq 0
  dq 0

inventoryAob:
  jmp newmem
  nop 2
return:
registersymbol(inventoryAob)
registersymbol(inventoryPtr)

[DISABLE]
inventoryAob:
  db 0F B7 57 50 45 33 C0
unregistersymbol(inventoryAob)
unregistersymbol(inventoryPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+735B2E

"RDR2.exe"+735B0E: E8 51 7E FF FF     -  call RDR2.exe+72D964
"RDR2.exe"+735B13: 40 84 ED           -  test bpl,bpl
"RDR2.exe"+735B16: 74 16              -  je RDR2.exe+735B2E
"RDR2.exe"+735B18: 48 85 C0           -  test rax,rax
"RDR2.exe"+735B1B: 74 11              -  je RDR2.exe+735B2E
"RDR2.exe"+735B1D: 4C 8D 44 24 48     -  lea r8,[rsp+48]
"RDR2.exe"+735B22: 8B D6              -  mov edx,esi
"RDR2.exe"+735B24: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+735B27: E8 48 F7 FD FF     -  call RDR2.exe+715274
"RDR2.exe"+735B2C: EB 5A              -  jmp RDR2.exe+735B88
// ---------- INJECTING HERE ----------
"RDR2.exe"+735B2E: 0F B7 57 50        -  movzx edx,word ptr [rdi+50]
"RDR2.exe"+735B32: 45 33 C0           -  xor r8d,r8d
// ---------- DONE INJECTING  ----------
"RDR2.exe"+735B35: 48 85 D2           -  test rdx,rdx
"RDR2.exe"+735B38: 74 4E              -  je RDR2.exe+735B88
"RDR2.exe"+735B3A: 33 C9              -  xor ecx,ecx
"RDR2.exe"+735B3C: 48 83 F9 FF        -  cmp rcx,-01
"RDR2.exe"+735B40: 74 14              -  je RDR2.exe+735B56
"RDR2.exe"+735B42: 48 85 C9           -  test rcx,rcx
"RDR2.exe"+735B45: 78 0F              -  js RDR2.exe+735B56
"RDR2.exe"+735B47: 44 3B C2           -  cmp r8d,edx
"RDR2.exe"+735B4A: 7D 0A              -  jnl RDR2.exe+735B56
"RDR2.exe"+735B4C: 48 8B 47 48        -  mov rax,[rdi+48]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16228</ID>
          <Description>"Cycle through inventory by modifying the "0*8" offset of Item X record"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16229</ID>
          <Description>"Change the "0" to any hex value up to the Inventory Size shown below"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16230</ID>
          <Description>"Or use the Search script below to find an address with a specific value"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16231</ID>
          <Description>"Money is stored as a whole number representing total cents"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16221</ID>
          <Description>"Inventory Size (hex)"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>2 Bytes</VariableType>
          <Address>inventoryPtr</Address>
          <Offsets>
            <Offset>18</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16223</ID>
          <Description>"Item X Quantity (change X*8 offset)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>inventoryPtr</Address>
          <Offsets>
            <Offset>28</Offset>
            <Offset>0*8</Offset>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16226</ID>
          <Description>"Activate to Search for an Inventory Quantity (money too)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
local value = inputQuery("Search Value", "Enter a value to find:", "")
value = tonumber(value)
local size = readSmallInteger("[inventoryPtr]+18")
local pointer = readPointer("[inventoryPtr]+10")
local i = 0
local found = false
for i = 0, size, 1 do
  local index = i * 0x8
  local address = readPointer(pointer + index)
  local quantity = readInteger(address + 0x28)
  if quantity == value then
    writeQword("inventoryPtr+8", address)
    found = true
    break
  end
end
if found then
  showMessage("Value found")
else
  showMessage("Unable to find value")
end
assert(false)
{$asm}

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16227</ID>
          <Description>"Found Address Quantity"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>inventoryPtr+8</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16244</ID>
      <Description>"Activate Cheats"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(_Player,RDR2.exe,48 8B 03 4D 03 F6)
aobscanmodule(_VitaliySystem,RDR2.exe,0F 28 CE FF 50 40 0F 2F)
aobscanmodule(_StaminaHorseBase,RDR2.exe,49 8B CE F3 44 0F 10 60 20)
aobscanmodule(_InfiniteDeadEye,RDR2.exe,0F 28 C8 48 8B CB E8 ** ** ** ** 48 8B CB)
aobscanmodule(_StaminaBase,RDR2.exe,F3 0F 59 44 24 70 45 33)
aobscanmodule(_DeadEyeBase,RDR2.exe,0F 2F 70 20 72 11)
aobscanmodule(_GetPlayerHealthBase,RDR2.exe,48 8B 41 10 0F 2F 78 20 72 07)
aobscanmodule(_GodMode,RDR2.exe,48 8D 68 98 48 81 EC 30 01 00 00 41 F6)
aobscanmodule(_NoReload,RDR2.exe,0F 57 DB 0F 57 D2 8B)
aobscanmodule(_InfiniteAmmo,RDR2.exe,44 38 B1 B0 00 00 00)
aobscanmodule(_sPYcAM,RDR2.exe,41 0F 10 54 24 40 F3)
aobscanmodule(_HealthBaseHorse,RDR2.exe,48 8B 48 10 0F 2F 41 20 0F 82 10)
aobscanmodule(_GetpHorse,RDR2.exe,F2 48 8B 02 FF 90 B8 00 00 00 48)
aobscanmodule(_Money,RDR2.exe,03 70 28 48 83 C3 10)
aobscanmodule(_Bounty,RDR2.exe,8B 90 0C 72 00 00) //
aobscanmodule(_NoSpread,RDR2.exe,F3 0F 11 4B 10 F3 0F 10 05)
aobscanmodule(_GetpAnyModel,RDR2.exe,48 8B 01 FF 90 F0 00 00 00 4C 8B F0)
alloc(newmemPlayer,$1000,RDR2.exe)
alloc(_pAnyModelBase,8)
alloc(_pPlayer,8)
alloc(_enableInfiniteStaminaHorse,8)
alloc(_enableInfiniteDeadEye,8)
alloc(_enableInfiniteHealth,8)
alloc(_enableInfiniteHealthCostumModel,8)
alloc(_pStaminaHorse,8)
alloc(_pDeadEye,8)
alloc(_pStaminaBase,8)
alloc(_enableInfiniteStamina,8)
alloc(_pPlayerHealthBase,8)
alloc(_enableNoReload,8)
alloc(_enableInfiniteAmmo,8)
alloc(_addCamHeight,8)
alloc(_subCamHeight,8)
alloc(_ResetCamHeight,8)
alloc(_CamHeightVar,8)
alloc(_pHealthBaseHorse,8)
alloc(_enableInfiniteHealthHorse,8)
alloc(_pHorse,8)
alloc(_pMoney,8)
alloc(_pBounty,8)
alloc(_enableNoSpread,8)
registersymbol(_enableNoSpread)
registersymbol(_NoSpread)
registersymbol(_pBounty)
registersymbol(_Bounty)
registersymbol(_pMoney)
registersymbol(_Money)
registersymbol(_pHorse)
registersymbol(_GetpHorse)
registersymbol(_enableInfiniteHealthHorse)
registersymbol(_pHealthBaseHorse)
registersymbol(_HealthBaseHorse)
registersymbol(_enableInfiniteAmmo)
registersymbol(_InfiniteAmmo)
registersymbol(_enableNoReload)
registersymbol(_NoReload)
registersymbol(_pPlayer)
registersymbol(_Player)
registersymbol(_enableInfiniteHealth)
registersymbol(_enableInfiniteHealthCostumModel)
registersymbol(_pPlayerHealthBase)
registersymbol(_GetPlayerHealthBase)
registersymbol(_enableInfiniteStaminaHorse)
registersymbol(_enableInfiniteDeadEye)
registersymbol(_VitaliySystem)
registersymbol(_pDeadEye)
registersymbol(_DeadEyeBase)
registersymbol(_pStaminaHorse)
registersymbol(_StaminaHorseBase)
registersymbol(_InfiniteDeadEye)
registersymbol(_pStaminaBase)
registersymbol(_enableInfiniteStamina)
registersymbol(_StaminaBase)
registersymbol(_GodMode)
registersymbol(_addCamHeight)
registersymbol(_subCamHeight)
registersymbol(_ResetCamHeight)
registersymbol(_CamHeightVar)
registersymbol(_sPYcAM)
registersymbol(_pAnyModelBase)
registersymbol(_GetpAnyModel)

newmemPlayer:
mov [_pPlayer],rbx
codePlayer:
  mov rax,[rbx]
  add r14,r14
  jmp returnPlayer


newmem:
code:
  movaps xmm1,xmm6
  cmp rdi,[_pStaminaHorse]
  je StaminaHorse
  cmp rdi,[_pStaminaBase]
  je Stamina

Next:
  call qword ptr [rax+40]
  jmp return

StaminaHorse:
cmp [_enableInfiniteStaminaHorse],1
jne Next
jmp return

Stamina:
cmp [_enableInfiniteStamina],1
jne Next
jmp return


//////////////

newmemStaminaHorseBase:
mov [_pStaminaHorse],rax

codeStaminaHorseBase:
  mov rcx,r14
  movss xmm12,[rax+20]INJECT
  jmp returnStaminaHorseBase


newmemDeadEyeBase:
mov [_pDeadEye],rax
codeDeadEyeBase:
  comiss xmm6,[rax+20]
  jb _DeadEyeBase+17
  jmp returnDeadEyeBase

newmemInfiniteDeadEye:
cmp [_enableInfiniteDeadEye],1
jne codeInfiniteDeadEye
  mov rcx,rbx
  jmp returnInfiniteDeadEye

codeInfiniteDeadEye:
  movaps xmm1,xmm0
  mov rcx,rbx
  jmp returnInfiniteDeadEye

newmemStaminaBase:
mov [_pStaminaBase],rax
codeStaminaBase:
  movss xmm0,[rax+20]
  jmp returnStaminaBase

newmemHealthBase:

codeHealthBase:
  mov rax,[rcx+10]
  mov [_pPlayerHealthBase],rax
  comiss xmm7,[rax+20]
  jmp returnHealthBase


newmemGodMode:
cmp rdx,[_pPlayer]
je PlayerHealth
cmp rdx,[_pHorse]
je HorseHealth
cmp rdx,[_pAnyModelBase]
je PlayerHealthAnyModel
codeGodMode:
  mov rax,rsp
  mov [rax+08],rbx
  jmp returnGodMode

PlayerHealth:
cmp [_enableInfiniteHealth],1
jne codeGodMode
RET

HorseHealth:
cmp [_enableInfiniteHealthHorse],1
jne codeGodMode
RET

PlayerHealthAnyModel:
cmp [_enableInfiniteHealthCostumModel],1
jne codeGodMode
RET

newmemNoReload:
CMP rbx,[_pPlayer]
jne codeNoReload
cmp [_enableNoReload],1
jne codeNoReload
RET

codeNoReload:
  mov [rsp+08],rbx
  jmp returnNoReload


newmemInfiniteAmmo:
cmp [_enableInfiniteAmmo],1
jne codeInfiniteAmmo
RET
codeInfiniteAmmo:
  mov rax,rsp
  mov [rax+08],rbx
  jmp returnInfiniteAmmo



newmemsPYcAM:
cmp [_addCamHeight],1
je AddCamHeight
cmp [_subCamHeight],1
je SubCamHeight
cmp [_ResetCamHeight],1
je ResetCamHeight
jmp codesPYcAM


AddCamHeight:
mov [_addCamHeight],0
fld [r12+48]
fld [_CamHeightVar]
faddp
fstp [r12+48]
jmp codesPYcAM

SubCamHeight:
mov [_subCamHeight],0
cmp [r12+48],(float)1
jle ResetCamHeight
fld [r12+48]
fld [_CamHeightVar]
fsubp
fstp [r12+48]
jmp codesPYcAM


ResetCamHeight:
mov [_ResetCamHeight],0
mov [r12+48],(float)1
jmp codesPYcAM
codesPYcAM:
  movups xmm2,[r12+40]
  jmp returnsPYcAM


newmemHealthBaseHorse:
codeHealthBaseHorse:
  mov rcx,[rax+10]
  mov [_pHealthBaseHorse],rcx
  comiss xmm0,[rcx+20]
  jmp returnHealthBaseHorse


newmemGetpHorse:
   mov [_pHorse],rdx
codeGetpHorse:
  mov rax,[rdx]
  call qword ptr [rax+000000B8]
  jmp returnGetpHorse


newmemMoney:
mov [_pMoney],rax
codeMoney:
  add esi,[rax+28]
  add rbx,10
  jmp returnMoney

newmemBounty:
mov [_pBounty],rax
codeBounty:
  mov edx,[rax+0000720C]
  jmp returnBounty


newmemNoSpread:
cmp [_enableNoSpread],1
jne codeNoSpread
mov [rbx+10],0
jmp returnNoSpread

codeNoSpread:
movss [rbx+10],xmm1
jmp returnNoSpread

newmemNoSpread2:
cmp [_enableNoSpread],1
jne codeNoSpread
mov [rbx+10],0
codeNoSpread2:
  movss xmm1,[rbx+10]
  jmp returnNoSpread2

pAnyModelmem:
mov [_pAnyModelBase],rcx
pAnyModelcode:
  mov rax,[rcx]
  call qword ptr [rax+000000F0]
  jmp pAnyModelreturn


_Player:
  jmp newmemPlayer
  nop
returnPlayer:

_VitaliySystem:
  jmp newmem
  nop
return:

_StaminaHorseBase:
  jmp newmemStaminaHorseBase
  nop
  nop
  nop
  nop
returnStaminaHorseBase:

_DeadEyeBase:
  jmp newmemDeadEyeBase
  nop
returnDeadEyeBase:

_InfiniteDeadEye:
  jmp newmemInfiniteDeadEye
  nop
returnInfiniteDeadEye:

_StaminaBase+37:
  jmp newmemStaminaBase
returnStaminaBase:

_GetPlayerHealthBase:
  jmp newmemHealthBase
  nop
  nop
  nop
returnHealthBase:


_GodMode-1A:
  jmp newmemGodMode
  nop
  nop
returnGodMode:


_NoReload-3D:
  jmp newmemNoReload
returnNoReload:

_InfiniteAmmo-24:
  jmp newmemInfiniteAmmo
  nop
  nop
returnInfiniteAmmo:


_sPYcAM:
  jmp newmemsPYcAM
  nop
returnsPYcAM:


_HealthBaseHorse:
  jmp newmemHealthBaseHorse
  nop
  nop
  nop
returnHealthBaseHorse:

_GetpHorse+01:
  jmp newmemGetpHorse
  nop
  nop
  nop
  nop
returnGetpHorse:

_Money:
  jmp newmemMoney
  nop
  nop
returnMoney:

_Bounty:
  jmp newmemBounty
  nop
returnBounty:


_NoSpread:
  jmp newmemNoSpread
returnNoSpread:

_NoSpread-C:
  jmp newmemNoSpread2
returnNoSpread2:

_GetpAnyModel:
  jmp pAnyModelmem
  nop
  nop
  nop
  nop
pAnyModelreturn:

_pPlayer:
dq 0
_enableInfiniteStaminaHorse:
dd 0
_enableInfiniteDeadEye:
dd 0
_pStaminaHorse:
dd 0
_pDeadEye:
dd 0
_pStaminaBase:
dd 0
_enableInfiniteStamina:
dd 0
_pPlayerHealthBase:
dd 0
_enableInfiniteHealth:
dd 0
_enableNoReload:
dd 0
_enableInfiniteAmmo:
dd 0
_addCamHeight:
dd 0
_subCamHeight:
dd 0
_ResetCamHeight:
dd 0
_CamHeightVar:
dq (float)1
_pHealthBaseHorse:
dd 0
_enableInfiniteHealthHorse:
dd 0
_pHorse:
dd 0
_pMoney:
dd 0
_pBounty:
dd 0
_enableNoSpread:
dd 0
_pAnyModelBase:
dq 0
[DISABLE]

_Player:
  db 48 8B 03 4D 03 F6
_VitaliySystem:
  db 0F 28 CE FF 50 40
_StaminaHorseBase:
  db 49 8B CE F3 44 0F 10 60 20
_DeadEyeBase:
  db 0F 2F 70 20 72 11
_InfiniteDeadEye:
  db 0F 28 C8 48 8B CB
_StaminaBase+37:
  db F3 0F 10 40 20
_GetPlayerHealthBase:
  db 48 8B 41 10 0F 2F 78 20
_GodMode-1A:
  db 48 8B C4 48 89 58 08
_NoReload-3D:
  db 48 89 5C 24 08
_InfiniteAmmo-24:
  db 48 8B C4 48 89 58 08
_sPYcAM:
  db 41 0F 10 54 24 40
_HealthBaseHorse:
  db 48 8B 48 10 0F 2F 41 20
_GetpHorse+01:
  db 48 8B 02 FF 90 B8 00 00 00
_Money:
  db 03 70 28 48 83 C3 10
_Bounty:
  db 8B 90 0C 72 00 00
_NoSpread:
  db F3 0F 11 4B 10
_NoSpread-C:
  db F3 0F 10 4B 10
_GetpAnyModel:
  db 48 8B 01 FF 90 F0 00 00 00


dealloc(newmemPlayer)
dealloc(_pPlayer)
dealloc(_enableInfiniteStaminaHorse)
dealloc(_enableInfiniteDeadEye)
dealloc(_enableInfiniteHealth)
dealloc(_pStaminaHorse)
dealloc(_pDeadEye)
dealloc(_pStaminaBase)
dealloc(_enableInfiniteStamina)
dealloc(_pPlayerHealthBase)
dealloc(_enableNoReload)
dealloc(_enableInfiniteAmmo)
dealloc(_addCamHeight)
dealloc(_subCamHeight)
dealloc(_ResetCamHeight)
dealloc(_CamHeightVar)
dealloc(_pHealthBaseHorse)
dealloc(_enableInfiniteHealthHorse)
dealloc(_pHorse)
dealloc(_pMoney)
dealloc(_pBounty)
dealloc(_enableNoSpread)
dealloc(_enableInfiniteHealthCostumModel)
unregistersymbol(_GetpAnyModel)
unregistersymbol(_pAnyModelBase)
dealloc(_pAnyModelBase)
unregistersymbol(_enableInfiniteHealthCostumModel)
unregistersymbol(_enableNoSpread)
unregistersymbol(_NoSpread)
unregistersymbol(_pBounty)
unregistersymbol(_Bounty)
unregistersymbol(_pMoney)
unregistersymbol(_Money)
unregistersymbol(_pHorse)
unregistersymbol(_GetpHorse)
unregistersymbol(_enableInfiniteHealthHorse)
unregistersymbol(_pHealthBaseHorse)
unregistersymbol(_HealthBaseHorse)
unregistersymbol(_enableInfiniteAmmo)
unregistersymbol(_InfiniteAmmo)
unregistersymbol(_enableNoReload)
unregistersymbol(_NoReload)
unregistersymbol(_pPlayer)
unregistersymbol(_Player)
unregistersymbol(_enableInfiniteHealth)
unregistersymbol(_pPlayerHealthBase)
unregistersymbol(_GetPlayerHealthBase)
unregistersymbol(_enableInfiniteStaminaHorse)
unregistersymbol(_enableInfiniteDeadEye)
unregistersymbol(_VitaliySystem)
unregistersymbol(_pDeadEye)
unregistersymbol(_DeadEyeBase)
unregistersymbol(_pStaminaHorse)
unregistersymbol(_StaminaHorseBase)
unregistersymbol(_InfiniteDeadEye)
unregistersymbol(_pStaminaBase)
unregistersymbol(_enableInfiniteStamina)
unregistersymbol(_StaminaBase)
unregistersymbol(_GodMode)
unregistersymbol(_addCamHeight)
unregistersymbol(_subCamHeight)
unregistersymbol(_ResetCamHeight)
unregistersymbol(_CamHeightVar)
unregistersymbol(_sPYcAM)
{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+4277D2

"RDR2.exe"+4277B0: B0 01              -  mov al,01
"RDR2.exe"+4277B2: EB C4              -  jmp RDR2.exe+427778
"RDR2.exe"+4277B4: 40 53              -  push rbx
"RDR2.exe"+4277B6: 48 83 EC 20        -  sub rsp,20
"RDR2.exe"+4277BA: E8 F9 F0 5E 02     -  call RDR2.exe+2A168B8
"RDR2.exe"+4277BF: 48 8B D8           -  mov rbx,rax
"RDR2.exe"+4277C2: 48 85 C0           -  test rax,rax
"RDR2.exe"+4277C5: 74 22              -  je RDR2.exe+4277E9
"RDR2.exe"+4277C7: 8B 0D 1F DE 4A 03  -  mov ecx,[RDR2.exe+38D55EC]
"RDR2.exe"+4277CD: 48 8D 54 24 38     -  lea rdx,[rsp+38]
// ---------- INJECTING HERE ----------
"RDR2.exe"+4277D2: 4C 8B 00           -  mov r8,[rax]
"RDR2.exe"+4277D5: 89 4C 24 38        -  mov [rsp+38],ecx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+4277D9: 48 8B C8           -  mov rcx,rax
"RDR2.exe"+4277DC: 41 FF 50 08        -  call qword ptr [r8+08]
"RDR2.exe"+4277E0: 84 C0              -  test al,al
"RDR2.exe"+4277E2: 74 05              -  je RDR2.exe+4277E9
"RDR2.exe"+4277E4: 48 8B C3           -  mov rax,rbx
"RDR2.exe"+4277E7: EB 02              -  jmp RDR2.exe+4277EB
"RDR2.exe"+4277E9: 33 C0              -  xor eax,eax
"RDR2.exe"+4277EB: 48 83 C4 20        -  add rsp,20
"RDR2.exe"+4277EF: 5B                 -  pop rbx
"RDR2.exe"+4277F0: C3                 -  ret
}


</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16245</ID>
          <Description>"Cycle through inventory by modifying the "0*8" offset of Item X record"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16246</ID>
          <Description>"Change the "0" to any hex value up to the Inventory Size shown below"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16247</ID>
          <Description>"Or use the Search script below to find an address with a specific value"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16248</ID>
          <Description>"Money is stored as a whole number representing total cents"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16249</ID>
          <Description>"Inventory Size (hex)"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>2 Bytes</VariableType>
          <Address>inventoryPtr</Address>
          <Offsets>
            <Offset>18</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16250</ID>
          <Description>"Item X Quantity (change X*8 offset)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>inventoryPtr</Address>
          <Offsets>
            <Offset>28</Offset>
            <Offset>0*8</Offset>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16251</ID>
          <Description>"Activate to Search for an Inventory Quantity (money too)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
local value = inputQuery("Search Value", "Enter a value to find:", "")
value = tonumber(value)
local size = readSmallInteger("[inventoryPtr]+18")
local pointer = readPointer("[inventoryPtr]+10")
local i = 0
local found = false
for i = 0, size, 1 do
  local index = i * 0x8
  local address = readPointer(pointer + index)
  local quantity = readInteger(address + 0x28)
  if quantity == value then
    writeQword("inventoryPtr+8", address)
    found = true
    break
  end
end
if found then
  showMessage("Value found")
else
  showMessage("Unable to find value")
end
assert(false)
{$asm}

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16252</ID>
          <Description>"Found Address Quantity"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>inventoryPtr+8</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16253</ID>
      <Description>"Inf Ammo"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

assert("RDR2.exe"+111BD2A,74 16 44 8B 8C 24 D0 00 00 00) // should be unique
"RDR2.exe"+111BD2A:
db eb 16
[DISABLE]

"RDR2.exe"+111BD2A:
  db 74 16


{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+111BD2A

"RDR2.exe"+111BD0A: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+111BD0D: E8 FE A1 B4 FF           -  call RDR2.exe+C65F10
"RDR2.exe"+111BD12: 48 85 C0                 -  test rax,rax
"RDR2.exe"+111BD15: 75 0D                    -  jne RDR2.exe+111BD24
"RDR2.exe"+111BD17: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+111BD1A: E8 6D 9B B4 FF           -  call RDR2.exe+C6588C
"RDR2.exe"+111BD1F: 48 85 C0                 -  test rax,rax
"RDR2.exe"+111BD22: 74 03                    -  je RDR2.exe+111BD27
"RDR2.exe"+111BD24: 41 8A EE                 -  mov bpl,r14l
"RDR2.exe"+111BD27: 40 84 ED                 -  test bpl,bpl
// ---------- INJECTING HERE ----------
"RDR2.exe"+111BD2A: 74 16                    -  je RDR2.exe+111BD42
"RDR2.exe"+111BD2C: 44 8B 8C 24 D0 00 00 00  -  mov r9d,[rsp+000000D0]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+111BD34: 4C 8B C6                 -  mov r8,rsi
"RDR2.exe"+111BD37: 48 8B D3                 -  mov rdx,rbx
"RDR2.exe"+111BD3A: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+111BD3D: E8 42 F5 06 00           -  call RDR2.exe+118B284
"RDR2.exe"+111BD42: 4C 8B C7                 -  mov r8,rdi
"RDR2.exe"+111BD45: 48 8D 0D E4 53 CE 03     -  lea rcx,[RDR2.exe+4E01130]
"RDR2.exe"+111BD4C: 48 8B D3                 -  mov rdx,rbx
"RDR2.exe"+111BD4F: E8 A0 61 2F 00           -  call RDR2.exe+1411EF4
"RDR2.exe"+111BD54: 44 8B 84 24 C8 00 00 00  -  mov r8d,[rsp+000000C8]
"RDR2.exe"+111BD5C: 48 8B D3                 -  mov rdx,rbx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16254</ID>
          <Description>"Cycle through inventory by modifying the "0*8" offset of Item X record"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16255</ID>
          <Description>"Change the "0" to any hex value up to the Inventory Size shown below"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16256</ID>
          <Description>"Or use the Search script below to find an address with a specific value"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16257</ID>
          <Description>"Money is stored as a whole number representing total cents"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>16258</ID>
          <Description>"Inventory Size (hex)"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>2 Bytes</VariableType>
          <Address>inventoryPtr</Address>
          <Offsets>
            <Offset>18</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16259</ID>
          <Description>"Item X Quantity (change X*8 offset)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>inventoryPtr</Address>
          <Offsets>
            <Offset>28</Offset>
            <Offset>0*8</Offset>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16260</ID>
          <Description>"Activate to Search for an Inventory Quantity (money too)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
local value = inputQuery("Search Value", "Enter a value to find:", "")
value = tonumber(value)
local size = readSmallInteger("[inventoryPtr]+18")
local pointer = readPointer("[inventoryPtr]+10")
local i = 0
local found = false
for i = 0, size, 1 do
  local index = i * 0x8
  local address = readPointer(pointer + index)
  local quantity = readInteger(address + 0x28)
  if quantity == value then
    writeQword("inventoryPtr+8", address)
    found = true
    break
  end
end
if found then
  showMessage("Value found")
else
  showMessage("Unable to find value")
end
assert(false)
{$asm}

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16261</ID>
          <Description>"Found Address Quantity"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>inventoryPtr+8</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"pointerscan result"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>"RDR2.exe"+050E7708</Address>
      <Offsets>
        <Offset>7E8</Offset>
        <Offset>1D0</Offset>
        <Offset>30</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>16232</ID>
      <Description>"No description"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>038E11E0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16233</ID>
      <Description>"No description"</Description>
      <LastState Value="4294967295" RealAddress="17E867B0"/>
      <VariableType>4 Bytes</VariableType>
      <Address>17E867B0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16234</ID>
      <Description>"No description"</Description>
      <LastState Value="-6.51582312E35" RealAddress="2B1C1550"/>
      <VariableType>Float</VariableType>
      <Address>2B1C1550</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16235</ID>
      <Description>"No description"</Description>
      <LastState Value="4268892578" RealAddress="2C81BAA8"/>
      <VariableType>4 Bytes</VariableType>
      <Address>2C81BAA8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16236</ID>
      <Description>"No description"</Description>
      <LastState Value="220.0981445" RealAddress="2CEC24F0"/>
      <VariableType>Float</VariableType>
      <Address>2CEC24F0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16237</ID>
      <Description>"No description"</Description>
      <LastState Value="8.305758858E-12" RealAddress="2D121D80"/>
      <VariableType>Float</VariableType>
      <Address>2D121D80</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16238</ID>
      <Description>"No description"</Description>
      <LastState Value="0" RealAddress="2D4F16A8"/>
      <VariableType>Double</VariableType>
      <Address>2D4F16A8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16239</ID>
      <Description>"No description"</Description>
      <LastState Value="2.369356081E-38" RealAddress="2D9E0E10"/>
      <VariableType>Float</VariableType>
      <Address>2D9E0E10</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16240</ID>
      <Description>"No description"</Description>
      <LastState Value="0" RealAddress="2D9F2870"/>
      <VariableType>Float</VariableType>
      <Address>2D9F2870</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16241</ID>
      <Description>"No description"</Description>
      <LastState Value="3.19572566296443E-311" RealAddress="648AA7E88"/>
      <VariableType>Double</VariableType>
      <Address>648AA7E88</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16242</ID>
      <Description>"No description"</Description>
      <LastState Value="0" RealAddress="648AA8188"/>
      <VariableType>Double</VariableType>
      <Address>648AA8188</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16243</ID>
      <Description>"No description"</Description>
      <LastState Value="0" RealAddress="929F3E728"/>
      <VariableType>4 Bytes</VariableType>
      <Address>929F3E728</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16262</ID>
      <Description>"Enable"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(healthh,RDR2.exe,0F 28 F0 48 83 EB 08) // should be unique
alloc(newmem,$1000,healthh)

label(code)
label(return)
registersymbol(staminastruct)
label(staminastruct)
registersymbol(healthstruct)
label(healthstruct)
registersymbol(horsestaminastruct)
label(horsestaminastruct)
registersymbol(deadeyestruct)
label(deadeyestruct)
registersymbol(horsehealthstruct)
label(horsehealthstruct)

newmem:
cmp rdi, [staminastruct]
je code
cmp rdi, [healthstruct]
je code
cmp rdi, [horsestaminastruct]
je code
cmp rdi, [deadeyestruct]
je code
cmp rdi, [horsehealthstruct]
je code
mov rcx,[rbx]
test rcx,rcx
jmp return
code:
mov rcx,[rbx]
cmp rcx, rcx
  jmp return

staminastruct:
dq 0

healthstruct:
dq 0

horsestaminastruct:
dq 0

deadeyestruct:
dq 0

horsehealthstruct:
dq 0

healthh-10:
  jmp newmem
  nop
return:
registersymbol(healthh)

[DISABLE]

healthh-10:
  db 48 8B 0B 48 85 C9

unregistersymbol(healthh)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+6D37BB

"RDR2.exe"+6D3797: 75 B4                 -  jne RDR2.exe+6D374D
"RDR2.exe"+6D3799: BE 01 00 00 00        -  mov esi,00000001
"RDR2.exe"+6D379E: 48 8D 5F 58           -  lea rbx,[rdi+58]
"RDR2.exe"+6D37A2: 0F 2F F7              -  comiss xmm6,xmm7
"RDR2.exe"+6D37A5: 0F 83 46 02 00 00     -  jae RDR2.exe+6D39F1
"RDR2.exe"+6D37AB: 48 8B 0B              -  mov rcx,[rbx]
"RDR2.exe"+6D37AE: 48 85 C9              -  test rcx,rcx
"RDR2.exe"+6D37B1: 74 0B                 -  je RDR2.exe+6D37BE
"RDR2.exe"+6D37B3: 0F 28 CE              -  movaps xmm1,xmm6
"RDR2.exe"+6D37B6: E8 69 37 02 00        -  call RDR2.exe+6F6F24
// ---------- INJECTING HERE ----------
"RDR2.exe"+6D37BB: 0F 28 F0              -  movaps xmm6,xmm0
"RDR2.exe"+6D37BE: 48 83 EB 08           -  sub rbx,08
// ---------- DONE INJECTING  ----------
"RDR2.exe"+6D37C2: 83 EE 01              -  sub esi,01
"RDR2.exe"+6D37C5: 79 DB                 -  jns RDR2.exe+6D37A2
"RDR2.exe"+6D37C7: 0F 2F F7              -  comiss xmm6,xmm7
"RDR2.exe"+6D37CA: 0F 83 21 02 00 00     -  jae RDR2.exe+6D39F1
"RDR2.exe"+6D37D0: 45 33 C9              -  xor r9d,r9d
"RDR2.exe"+6D37D3: 44 8A C5              -  mov r8l,bpl
"RDR2.exe"+6D37D6: 0F 28 CE              -  movaps xmm1,xmm6
"RDR2.exe"+6D37D9: 48 8B CF              -  mov rcx,rdi
"RDR2.exe"+6D37DC: E8 D3 FD FF FF        -  call RDR2.exe+6D35B4
"RDR2.exe"+6D37E1: 0F 2F C7              -  comiss xmm0,xmm7
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16263</ID>
          <Description>"Infinite Stamina"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(staminna,RDR2.exe,F3 0F 10 78 20 F6) // should be unique
alloc(newmem,$1000,staminna)

label(code)
label(return)


newmem:
mov [staminastruct],rax
code:
  movss xmm7,[rax+20]
  jmp return



staminna:
  jmp newmem
return:
registersymbol(staminna)

[DISABLE]

staminna:
  db F3 0F 10 78 20

unregistersymbol(staminna)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+C9BD56

"RDR2.exe"+C9BD2E: 0F 29 7C 24 20              -  movaps [rsp+20],xmm7
"RDR2.exe"+C9BD33: E8 C0 E2 FD FF              -  call RDR2.exe+C79FF8
"RDR2.exe"+C9BD38: 48 8B C8                    -  mov rcx,rax
"RDR2.exe"+C9BD3B: E8 48 BB F4 FF              -  call RDR2.exe+BE7888
"RDR2.exe"+C9BD40: 48 8B F8                    -  mov rdi,rax
"RDR2.exe"+C9BD43: 48 85 C0                    -  test rax,rax
"RDR2.exe"+C9BD46: 74 64                       -  je RDR2.exe+C9BDAC
"RDR2.exe"+C9BD48: 48 8B C8                    -  mov rcx,rax
"RDR2.exe"+C9BD4B: E8 60 FB 45 FF              -  call RDR2.exe+FB8B0
"RDR2.exe"+C9BD50: 8A 8B 80 90 00 00           -  mov cl,[rbx+00009080]
// ---------- INJECTING HERE ----------
"RDR2.exe"+C9BD56: F3 0F 10 78 20              -  movss xmm7,[rax+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+C9BD5B: F6 C1 40                    -  test cl,40
"RDR2.exe"+C9BD5E: 74 33                       -  je RDR2.exe+C9BD93
"RDR2.exe"+C9BD60: F3 0F 10 35 DC 23 23 04     -  movss xmm6,[RDR2.exe+4ECE144]
"RDR2.exe"+C9BD68: 48 8B CF                    -  mov rcx,rdi
"RDR2.exe"+C9BD6B: E8 40 FB 45 FF              -  call RDR2.exe+FB8B0
"RDR2.exe"+C9BD70: F3 0F 10 40 24              -  movss xmm0,[rax+24]
"RDR2.exe"+C9BD75: 0F 2F C6                    -  comiss xmm0,xmm6
"RDR2.exe"+C9BD78: 77 0B                       -  ja RDR2.exe+C9BD85
"RDR2.exe"+C9BD7A: 0F 28 F0                    -  movaps xmm6,xmm0
"RDR2.exe"+C9BD7D: F3 0F 59 35 AB 07 55 02     -  mulss xmm6,[RDR2.exe+31EC530]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16264</ID>
          <Description>"Infinite Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(gethealthh,RDR2.exe,48 8B 48 10 0F 2F 41 20 72 05 40 B6 01 EB 03 40 32 F6 4D) // should be unique
alloc(newmem,$1000,gethealthh)

label(code)
label(return)


newmem:

code:
  mov rcx,[rax+10]
  mov [healthstruct],rcx
  comiss xmm0,[rcx+20]
  jmp return

gethealthh:
  jmp newmem
  nop 3
return:
registersymbol(gethealthh)

[DISABLE]

gethealthh:
  db 48 8B 48 10 0F 2F 41 20

unregistersymbol(gethealthh)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+140B116

"RDR2.exe"+140B0EE: 0F 57 C0                 -  xorps xmm0,xmm0
"RDR2.exe"+140B0F1: 41 23 CB                 -  and ecx,r11d
"RDR2.exe"+140B0F4: 41 2B CA                 -  sub ecx,r10d
"RDR2.exe"+140B0F7: 48 69 D1 48 01 00 00     -  imul rdx,rcx,00000148
"RDR2.exe"+140B0FE: 4A 8B 84 0A A0 00 00 00  -  mov rax,[rdx+r9+000000A0]
"RDR2.exe"+140B106: 48 8B C8                 -  mov rcx,rax
"RDR2.exe"+140B109: 48 83 E1 FE              -  and rcx,-02
"RDR2.exe"+140B10D: 48 F7 D8                 -  neg rax
"RDR2.exe"+140B110: 48 1B C0                 -  sbb rax,rax
"RDR2.exe"+140B113: 48 23 C1                 -  and rax,rcx
// ---------- INJECTING HERE ----------
"RDR2.exe"+140B116: 48 8B 48 10              -  mov rcx,[rax+10]
"RDR2.exe"+140B11A: 0F 2F 41 20              -  comiss xmm0,[rcx+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+140B11E: 72 05                    -  jb RDR2.exe+140B125
"RDR2.exe"+140B120: 40 B6 01                 -  mov sil,01
"RDR2.exe"+140B123: EB 03                    -  jmp RDR2.exe+140B128
"RDR2.exe"+140B125: 40 32 F6                 -  xor sil,sil
"RDR2.exe"+140B128: 4D 85 C0                 -  test r8,r8
"RDR2.exe"+140B12B: 74 3E                    -  je RDR2.exe+140B16B
"RDR2.exe"+140B12D: 41 8B 80 9C 00 00 00     -  mov eax,[r8+0000009C]
"RDR2.exe"+140B134: 41 23 C3                 -  and eax,r11d
"RDR2.exe"+140B137: 41 2B C2                 -  sub eax,r10d
"RDR2.exe"+140B13A: 48 69 C8 48 01 00 00     -  imul rcx,rax,00000148
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16265</ID>
          <Description>"Infinite Horse Stamina"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(horseystamina,RDR2.exe,F3 0F 10 40 20 EB 17) // should be unique
alloc(newmem,$1000,horseystamina)

label(code)
label(return)


newmem:
mov [horsestaminastruct],rax
code:
  movss xmm0,[rax+20]
  jmp return



horseystamina:
  jmp newmem
return:
registersymbol(horseystamina)

[DISABLE]

horseystamina:
  db F3 0F 10 40 20

unregistersymbol(horseystamina)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+F97AB8

"RDR2.exe"+F97A96: E8 19 FD 48 FF           -  call RDR2.exe+4277B4
"RDR2.exe"+F97A9B: 48 8B D8                 -  mov rbx,rax
"RDR2.exe"+F97A9E: 48 85 C0                 -  test rax,rax
"RDR2.exe"+F97AA1: 74 30                    -  je RDR2.exe+F97AD3
"RDR2.exe"+F97AA3: 48 8B C8                 -  mov rcx,rax
"RDR2.exe"+F97AA6: E8 DD FD C4 FF           -  call RDR2.exe+BE7888
"RDR2.exe"+F97AAB: 48 85 C0                 -  test rax,rax
"RDR2.exe"+F97AAE: 74 0F                    -  je RDR2.exe+F97ABF
"RDR2.exe"+F97AB0: 48 8B C8                 -  mov rcx,rax
"RDR2.exe"+F97AB3: E8 F8 3D 16 FF           -  call RDR2.exe+FB8B0
// ---------- INJECTING HERE ----------
"RDR2.exe"+F97AB8: F3 0F 10 40 20           -  movss xmm0,[rax+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+F97ABD: EB 17                    -  jmp RDR2.exe+F97AD6
"RDR2.exe"+F97ABF: 48 8B CB                 -  mov rcx,rbx
"RDR2.exe"+F97AC2: E8 45 B3 C6 FF           -  call RDR2.exe+C02E0C
"RDR2.exe"+F97AC7: 48 85 C0                 -  test rax,rax
"RDR2.exe"+F97ACA: 74 07                    -  je RDR2.exe+F97AD3
"RDR2.exe"+F97ACC: F3 0F 10 40 08           -  movss xmm0,[rax+08]
"RDR2.exe"+F97AD1: EB 03                    -  jmp RDR2.exe+F97AD6
"RDR2.exe"+F97AD3: 0F 57 C0                 -  xorps xmm0,xmm0
"RDR2.exe"+F97AD6: 48 83 C4 20              -  add rsp,20
"RDR2.exe"+F97ADA: 5B                       -  pop rbx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16266</ID>
          <Description>"Infinite Dead Eye"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(deadyee,RDR2.exe,CD FF 48 8B 90 98 00 00 00 F3 0F 10 40 20) // should be unique
alloc(newmem,$1000,deadyee)

label(code)
label(return)

newmem:
mov [deadeyestruct],rax
code:
  movss xmm0,[rax+20]
  jmp return

deadyee+09:
  jmp newmem
return:
registersymbol(deadyee)

[DISABLE]

deadyee+09:
  db F3 0F 10 40 20

unregistersymbol(deadyee)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+F9A3F9

"RDR2.exe"+F9A3D5: 48 1B C9                 -  sbb rcx,rcx
"RDR2.exe"+F9A3D8: 48 23 C8                 -  and rcx,rax
"RDR2.exe"+F9A3DB: 74 09                    -  je RDR2.exe+F9A3E6
"RDR2.exe"+F9A3DD: 48 8B 89 70 92 00 00     -  mov rcx,[rcx+00009270]
"RDR2.exe"+F9A3E4: EB 02                    -  jmp RDR2.exe+F9A3E8
"RDR2.exe"+F9A3E6: 33 C9                    -  xor ecx,ecx
"RDR2.exe"+F9A3E8: 48 85 C9                 -  test rcx,rcx
"RDR2.exe"+F9A3EB: 74 3E                    -  je RDR2.exe+F9A42B
"RDR2.exe"+F9A3ED: E8 92 7A CD FF           -  call RDR2.exe+C71E84
"RDR2.exe"+F9A3F2: 48 8B 90 98 00 00 00     -  mov rdx,[rax+00000098]
// ---------- INJECTING HERE ----------
"RDR2.exe"+F9A3F9: F3 0F 10 40 20           -  movss xmm0,[rax+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+F9A3FE: 44 8B 42 04              -  mov r8d,[rdx+04]
"RDR2.exe"+F9A402: 8B 12                    -  mov edx,[rdx]
"RDR2.exe"+F9A404: 41 C1 C0 10              -  rol r8d,10
"RDR2.exe"+F9A408: 41 C1 C8 05              -  ror r8d,05
"RDR2.exe"+F9A40C: 41 33 D0                 -  xor edx,r8d
"RDR2.exe"+F9A40F: 41 8B C8                 -  mov ecx,r8d
"RDR2.exe"+F9A412: 83 E1 0F                 -  and ecx,0F
"RDR2.exe"+F9A415: 83 C1 02                 -  add ecx,02
"RDR2.exe"+F9A418: D3 C2                    -  rol edx,cl
"RDR2.exe"+F9A41A: C1 C2 10                 -  rol edx,10
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16267</ID>
          <Description>"Infinite Horse Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(horseyhealt,RDR2.exe,48 8B 48 10 0F 2F 41 20 0F 82 79) // should be unique
alloc(newmem,$1000,horseyhealt)

label(code)
label(return)

newmem:

code:
  mov rcx,[rax+10]
  mov [horsehealthstruct],rax
  comiss xmm0,[rcx+20]
  jmp return



horseyhealt:
  jmp newmem
  nop 3
return:
registersymbol(horseyhealt)

[DISABLE]

horseyhealt:
  db 48 8B 48 10 0F 2F 41 20

unregistersymbol(horseyhealt)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+C61685

"RDR2.exe"+C61653: 8B 90 BC 00 00 00        -  mov edx,[rax+000000BC]
"RDR2.exe"+C61659: C1 E2 1D                 -  shl edx,1D
"RDR2.exe"+C6165C: 85 D2                    -  test edx,edx
"RDR2.exe"+C6165E: 7F 33                    -  jg RDR2.exe+C61693
"RDR2.exe"+C61660: 48 8D 95 08 06 00 00     -  lea rdx,[rbp+00000608]
"RDR2.exe"+C61667: 48 89 BD 08 06 00 00     -  mov [rbp+00000608],rdi
"RDR2.exe"+C6166E: 49 8D 8C 24 9C 00 00 00  -  lea rcx,[r12+0000009C]
"RDR2.exe"+C61676: E8 05 9C 9E FF           -  call RDR2.exe+64B280
"RDR2.exe"+C6167B: 48 8B 85 08 06 00 00     -  mov rax,[rbp+00000608]
"RDR2.exe"+C61682: 0F 57 C0                 -  xorps xmm0,xmm0
// ---------- INJECTING HERE ----------
"RDR2.exe"+C61685: 48 8B 48 10              -  mov rcx,[rax+10]
"RDR2.exe"+C61689: 0F 2F 41 20              -  comiss xmm0,[rcx+20]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+C6168D: 0F 82 79 06 00 00        -  jb RDR2.exe+C61D0C
"RDR2.exe"+C61693: 48 8B 4E 08              -  mov rcx,[rsi+08]
"RDR2.exe"+C61697: E8 8C 3C 70 00           -  call RDR2.exe+1365328
"RDR2.exe"+C6169C: 48 8B 56 08              -  mov rdx,[rsi+08]
"RDR2.exe"+C616A0: F6 DB                    -  neg bl
"RDR2.exe"+C616A2: 49 8B 8E 80 10 00 00     -  mov rcx,[r14+00001080]
"RDR2.exe"+C616A9: 4C 8B C8                 -  mov r9,rax
"RDR2.exe"+C616AC: 45 1B C0                 -  sbb r8d,r8d
"RDR2.exe"+C616AF: 44 88 7C 24 20           -  mov [rsp+20],r15l
"RDR2.exe"+C616B4: 41 81 E0 00 10 00 00     -  and r8d,00001000
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16268</ID>
      <Description>"No Reload"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(norly,RDR2.exe,2B C5 44 8B C3 8B D0 48 8B CF E8 C7) // should be unique

norly:
nop 2

registersymbol(norly)

[DISABLE]

norly:
  db 2B C5 44 8B C3

unregistersymbol(norly)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+116F58A

"RDR2.exe"+116F56B: 75 10                    -  jne RDR2.exe+116F57D
"RDR2.exe"+116F56D: 0F 57 DB                 -  xorps xmm3,xmm3
"RDR2.exe"+116F570: 0F 57 D2                 -  xorps xmm2,xmm2
"RDR2.exe"+116F573: 8B D5                    -  mov edx,ebp
"RDR2.exe"+116F575: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F578: E8 FF 5C FC FF           -  call RDR2.exe+113527C
"RDR2.exe"+116F57D: 83 CB FF                 -  or ebx,-01
"RDR2.exe"+116F580: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F583: 8B D3                    -  mov edx,ebx
"RDR2.exe"+116F585: E8 3A C2 00 FF           -  call RDR2.exe+17B7C4
// ---------- INJECTING HERE ----------
"RDR2.exe"+116F58A: 2B C5                    -  sub eax,ebp
"RDR2.exe"+116F58C: 44 8B C3                 -  mov r8d,ebx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+116F58F: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F591: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F594: E8 C7 19 FF FF           -  call RDR2.exe+1160F60
"RDR2.exe"+116F599: 8B 9F C8 00 00 00        -  mov ebx,[rdi+000000C8]
"RDR2.exe"+116F59F: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5A2: 8B D3                    -  mov edx,ebx
"RDR2.exe"+116F5A4: E8 53 78 50 FF           -  call RDR2.exe+676DFC
"RDR2.exe"+116F5A9: 2B C5                    -  sub eax,ebp
"RDR2.exe"+116F5AB: 44 8B C3                 -  mov r8d,ebx
"RDR2.exe"+116F5AE: 8B D0                    -  mov edx,eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16269</ID>
      <Description>"Infinite Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ammoy,RDR2.exe,2B C5 44 8B C3) // should be unique
alloc(newmem,$1000,ammoy)

label(code)
label(return)

newmem:
mov eax, #999
code:
//sub eax,ebp
  mov r8d,ebx
  jmp return

ammoy:
  jmp newmem
return:
registersymbol(ammoy)

[DISABLE]

ammoy:
  db 2B C5 44 8B C3

unregistersymbol(ammoy)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+116F5A9

"RDR2.exe"+116F585: E8 3A C2 00 FF           -  call RDR2.exe+17B7C4
"RDR2.exe"+116F58A: 66 90                    -  nop 
"RDR2.exe"+116F58C: 44 8B C3                 -  mov r8d,ebx
"RDR2.exe"+116F58F: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F591: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F594: E8 C7 19 FF FF           -  call RDR2.exe+1160F60
"RDR2.exe"+116F599: 8B 9F C8 00 00 00        -  mov ebx,[rdi+000000C8]
"RDR2.exe"+116F59F: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5A2: 8B D3                    -  mov edx,ebx
"RDR2.exe"+116F5A4: E8 53 78 50 FF           -  call RDR2.exe+676DFC
// ---------- INJECTING HERE ----------
"RDR2.exe"+116F5A9: 2B C5                    -  sub eax,ebp
"RDR2.exe"+116F5AB: 44 8B C3                 -  mov r8d,ebx
// ---------- DONE INJECTING  ----------
"RDR2.exe"+116F5AE: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F5B0: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5B3: E8 D0 1A FF FF           -  call RDR2.exe+1161088
"RDR2.exe"+116F5B8: 80 BF B0 00 00 00 00     -  cmp byte ptr [rdi+000000B0],00
"RDR2.exe"+116F5BF: 0F 84 A0 00 00 00        -  je RDR2.exe+116F665
"RDR2.exe"+116F5C5: 8B 87 C8 00 00 00        -  mov eax,[rdi+000000C8]
"RDR2.exe"+116F5CB: 48 8B CF                 -  mov rcx,rdi
"RDR2.exe"+116F5CE: 48 6B D8 68              -  imul rbx,rax,68
"RDR2.exe"+116F5D2: 8B D0                    -  mov edx,eax
"RDR2.exe"+116F5D4: 48 03 9F B8 00 00 00     -  add rbx,[rdi+000000B8]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16270</ID>
      <Description>"Infinite Items"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : RDR2.exe
  Version: 
  Date   : 2019-11-07
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(itemss,RDR2.exe,48 8B 57 28 8B 00) // should be unique
alloc(newmem,$1000,itemss)

label(code)
label(return)

newmem:
mov [rdi+28], #999
code:
  mov rdx,[rdi+28]
  mov eax,[rax]
  jmp return

itemss:
  jmp newmem
  nop
return:
registersymbol(itemss)

[DISABLE]

itemss:
  db 48 8B 57 28 8B 00

unregistersymbol(itemss)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "RDR2.exe"+74030B

"RDR2.exe"+7402EB: 74 0E              -  je RDR2.exe+7402FB
"RDR2.exe"+7402ED: 44 8B 70 08        -  mov r14d,[rax+08]
"RDR2.exe"+7402F1: 44 89 75 40        -  mov [rbp+40],r14d
"RDR2.exe"+7402F5: 4C 8B 75 58        -  mov r14,[rbp+58]
"RDR2.exe"+7402F9: EB 03              -  jmp RDR2.exe+7402FE
"RDR2.exe"+7402FB: 89 5D 40           -  mov [rbp+40],ebx
"RDR2.exe"+7402FE: 48 8B 07           -  mov rax,[rdi]
"RDR2.exe"+740301: 48 8D 55 48        -  lea rdx,[rbp+48]
"RDR2.exe"+740305: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+740308: FF 50 08           -  call qword ptr [rax+08]
// ---------- INJECTING HERE ----------
"RDR2.exe"+74030B: 48 8B 57 28        -  mov rdx,[rdi+28]
"RDR2.exe"+74030F: 8B 00              -  mov eax,[rax]
// ---------- DONE INJECTING  ----------
"RDR2.exe"+740311: 89 45 48           -  mov [rbp+48],eax
"RDR2.exe"+740314: 49 3B D4           -  cmp rdx,r12
"RDR2.exe"+740317: 0F 8C 3E 01 00 00  -  jl RDR2.exe+74045B
"RDR2.exe"+74031D: 48 8B 07           -  mov rax,[rdi]
"RDR2.exe"+740320: 49 2B D4           -  sub rdx,r12
"RDR2.exe"+740323: 4D 8B C6           -  mov r8,r14
"RDR2.exe"+740326: 48 8B CF           -  mov rcx,rdi
"RDR2.exe"+740329: FF 50 78           -  call qword ptr [rax+78]
"RDR2.exe"+74032C: B8 01 00 00 00     -  mov eax,00000001
"RDR2.exe"+740331: 48 8B CF           -  mov rcx,rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16271</ID>
      <Description>"No description"</Description>
      <LastState Value="996657" RealAddress="179B3810"/>
      <VariableType>4 Bytes</VariableType>
      <Address>179B3810</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16272</ID>
      <Description>"No description"</Description>
      <LastState Value="996657" RealAddress="86BF5E728"/>
      <VariableType>4 Bytes</VariableType>
      <Address>86BF5E728</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16273</ID>
      <Description>"No description"</Description>
      <LastState Value="796657" RealAddress="8EC59C2C8"/>
      <VariableType>4 Bytes</VariableType>
      <Address>8EC59C2C8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16274</ID>
      <Description>"pointerscan result"</Description>
      <LastState Value="996657" RealAddress="179B3810"/>
      <VariableType>4 Bytes</VariableType>
      <Address>"RDR2.exe"+04285050</Address>
      <Offsets>
        <Offset>B28</Offset>
        <Offset>B0</Offset>
        <Offset>28</Offset>
        <Offset>10</Offset>
        <Offset>18</Offset>
        <Offset>F0</Offset>
        <Offset>198</Offset>
      </Offsets>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"RDR2.exe"+70BC00</Address>
      <Comment>---------------&gt; jb
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"RDR2.exe"+8637EA</Address>
      <Comment>-------------------&gt;je
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"RDR2.exe"+2A42207</Address>
      <Comment>--------&gt; je
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
